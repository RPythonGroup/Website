---
title: "Hands-on Quarto Website" 
description:  "A hands-on step by step tutorial to create a website using Quarto."
author: "RPythonStudyGroup feat. ChatGPT"
date: "2024-11-04"
date-modified: "2024-11-04"
categories:
  - Quarto
  - website
  - hands-on
---

::: {.callout-note title="1단계: `Quarto Website` 프로젝트 만들기" collapse="true" appearance="minimal"}
-   RStudio/File 메뉴에서 `New Project...` 메뉴 선택
-   `New Directory`에 생성되도록 선택
-   Project type은 `Quarto Website`를 선택
-   상위폴더가 `C:/Projects`인지 확인 (=Global Options 사전 지정값)
-   Directory name은 `R-4.4.1-Quarto_Website_Example`로 지정
- [x] Create a git repository: 체크 유지하여 버전관리 적용
- [x] Use renv with this project: 체크 유지하여 패키지 독립관리 적용
- [x] Use visual markdown editor: 체크 유지하여 wizwig 에디터 사용
-   Quarto website 특이적 파일생성을 Output pane에서 확인할 수 있습니다.
    -   `_quarto.yml`: 전역옵션, 경로, 출력 등의 Quarto 전반의 설정 구성 파일
    -   `about.qmd`: 컨텐츠 파일로 웹페이지 전반에 대한 소개 역할
    -   `index.qmd`: 컨텐츠 파일로 웹페이지의 시작페이지 역할
    -   `style.css`: 스타일시트 파일로 웹페이지의 디자인을 담당
:::

```{r git_example, eval=FALSE, filename="recommeded project name"}
R-4.4.1-Quarto_Website_Example
```

::: {.callout-note title="2단계: 버전관리 제외대상 추가하기" collapse="true" appearance="minimal"}
-   `.gitignore` 파일을 열어서 아래의 내용을 추가하여 git 버전관리에서 제외합니다.
:::

```{r gitignore_add, eval=FALSE, filename=".gitignore"}
.Rprofile
*.Rproj
renv/
```

::: {.callout-note title="3단계: `index.qmd` 파일 이해하기" collapse="true" appearance="minimal"}
-   \*.qmd 파일은 아래와 같이 3부분으로 구성되어 있습니다.
    -   첫번째 부분은 YAML 헤더로, 문서의 메타데이터를 정의합니다. 여기에는 문서의 제목, 저자, 날짜, 카테고리 등이 포함됩니다.
    -   두번째 부분은 마크다운(Markdown)으로, 문서의 본문을 작성합니다. 마크다운은 텍스트 기반의 마크업 언어로, HTML보다 간단하게 문서를 작성할 수 있습니다.
    -   세번째 부분은 코드 블록으로, R 코드를 실행하고 결과를 출력합니다. 코드 블록은 마크다운 문서 내에서 코드를 실행하고 결과를 보여주는 기능을 제공합니다.
-   index.qmd 파일은 아래와 같이 작성되어 있습니다.

````         
---
title: "R-4.4.1-Quarto_Website_Example"
---

This is a Quarto website.

To learn more about Quarto websites visit <https://quarto.org/docs/websites>.

```{{r}}
1 + 1
```
````

-   Rendering하면 index.qmd는 index.html 파일로 변환되게 되며 publish 된 후 website가 사용가능하게 되었을 때, 방문자에게 가장 먼저 보여지는 페이지가 됩니다.
:::

::: {.callout-note title="4단계: `_quarto.yml` 파일 이해하기" collapse="true" appearance="minimal"}
-   YML 파일은 YAML(야믈) 형식으로 작성된 설정 파일입니다.
    -   YAML은 Yet Another Markup Language의 약자로, 사람이 읽기 쉽고 작성하기 용이한 데이터 직렬화 언어입니다.
    -   특히 들여쓰기를 통해 데이터 구조를 계층적으로 표현하여 가독성이 뛰어나며, JSON이나 XML보다 간결한 형식으로 자주 사용됩니다.
-   Quarto 프로젝트에서는 \_quarto.yml 파일을 통해 프로젝트의 전반적인 설정을 관리하고, Docker에서는 docker-compose.yml 파일을 사용하여 컨테이너 설정을 정의합니다.
    -   YAML은 파이썬(Python), 루비(Ruby) 등 많은 프로그래밍 언어와 잘 연동되며, GitLab CI/CD나 GitHub Actions 등에서도 빌드 및 배포 파이프라인을 정의하는 데 많이 쓰입니다.
-   YML 파일 작성 시, 일반적으로 공백으로 들여쓰기를 사용하고, 탭을 사용하지 않아야 합니다.
    -   잘못된 들여쓰기는 파싱 오류를 발생시킬 수 있어 주의가 필요합니다.
-   \_quarto.yml 파일은 아래와 같이 작성되어 있습니다.

```{r _quarto.yml, eval=FALSE, filename="_quarto.yml"}
project:
  type: website

website:
  title: "R-4.4.1-Quarto_Website_Example"
  navbar:
    left:
      - href: index.qmd
        text: Home
      - about.qmd

format:
  html:
    theme: cosmo
    css: styles.css
    toc: true

editor: visual
```

-   \_quarto.yml 파일은 각 코드에 대한 설명은 아래와 같습니다.
    -   project type은 project 생성 시 설정한대로 website로 이미 지정되어 있습니다.
    -   website의 title은 project folder name을 그대로 가져옵니다.
    -   navbar 설정은 홈페이지의 상단 메뉴를 정의합니다. Home과 about 페이지가 기본 예시로 만들어져 있습니다.
    -   left는 홈페이지 상단 메뉴의 정렬을 좌측으로 설정하는 것입니다.
    -   href는 hypertext reference의 href: index.qmd는 해당메뉴를 선택 시 index.qmd로 하이퍼링크가 됩니다.
    -   text는 메뉴에 표시되는 이름입니다.
    -   about.qmd에서 처럼 text를 지정하지 않으면 파일명이 메뉴에 표시됩니다.
    -   format은 website를 만드는 프로젝트이므오 html로 지정되어 있습니다.
    -   theme은 cosmo로 지정되어 있습니다.
    -   css는 Cascading Style Sheets의 약자로 웹페이지의 레이아웃과 스타일을 지정하는 언어로, HTML이나 XML로 작성된 콘텐츠의 글꼴, 색상, 간격, 레이아웃 등을 정의합니다. CSS는 콘텐츠와 디자인을 분리하여 코드의 가독성을 높이고 유지 관리를 쉽게 할 수 있도록 해줍니다.
    -   editor는 visual로 지정되어 있으며 프로젝트 생성 시 Visual Markdown Editor 옵션을 선택한 결과입니다. RStudio에서 Source와 Visual을 선택하여 편집할 수 있는 기능과 연관이 있으며, 이 설정이 활성화되면 마크다운 파일을 직접 코딩하지 않고도 미리보기를 보면서 편집할 수 있는 Visual 모드가 기본으로 열리게 됩니다.
:::

::: {.callout-note title="5단계: `style.css` 파일 이해하기" collapse="true" appearance="minimal"}
-   파일을 여러 내용을 보면 아래와 같이 아직 주석만 있고 어떠한 설정도 되어 있지 않은 상태입니다.

```{r style.css, eval=FALSE, filename="style.css"}
/* css styles */
```

-   원하는 설정을 추가해 둔다면 rendering 단계에서는 그대로 진행되지만 website에 올라간 이후에는 html 파일이 사용자에게 보여지는 스타일이 설정되로 달라지게 됩니다.
:::

::: {.callout-note title="6단계: 버전관리 첫번째 복원시점 설정하기" collapse="true" appearance="minimal"}
-   교육적인 목적으로 git commmit를 현단계에서 실행해 봅니다.
-   아래의 `git add .` 명령으로 프로젝트폴더 및 그 하위의 모든 폴더 및 파일들을 stage 영역으로 올립니다.

```{r git_add, eval=FALSE, filename="RStudio Terminal pane"}
git add .
```

-   아래의 `git commit -m "message"`명령으로 stage 영역에 올라간 파일들을 로컬저장소에 커밋합니다.
    -   커밋 메시지는 해당 커밋의 내용을 요약하여 작성합니다.
    -   여기서는 예시도 "First commit & project initial status"로 작성하였고 원하시는 내용으로 작성하시면 됩니다.
:::

```{r git_commit, eval=FALSE, filename="RStudio Terminal pane"}
git commit -m "First commit & project initial status"
```

::: {.callout-note title="7단계: Renderingn 해보기" collapse="true" appearance="minimal"}
-   \*.qmd 파일을 HTML 파일로 변환하는 것을 rendering이라 하며, 크게 2가지 방법이 있습니다. 아래의 그림처럼 `Source Pane`의 `*.qmd 파일 tab`을 선택하면 `Render button`을 볼 수 있는데 이를 실행해 봅니다.
    -   `Render button` 기능을 사용하면 Rendering Quarto Knitr Documents에는 migrittr, stringi, stringr 패키지들의 updated version이 필요하여 설치를 물어보며 설치하시면 됩니다.
    -   Rendering이 되는 동안에 `Console Pane` `Background jobs tab`에서 아래의 message 들이 출력됩니다.

```{r quarto_render_outout, eval=FALSE, filename="Console Pane Background jobs tab"}
==> quarto preview index.qmd --to html --no-watch-inputs --no-browse

processing file: index.qmd
                                                                                           
output file: index.knit.md

pandoc 
  to: html
  output-file: index.html
  standalone: true
  title-prefix: R-4.4.1-Quarto_Website_Example
  section-divs: true
  html-math-method: mathjax
  wrap: none
  default-image-extension: png
  css:
    - styles.css
  toc: true
  
metadata
  document-css: false
  link-citations: true
  date-format: long
  lang: en
  editor: visual
  theme: cosmo
  title: R-4.4.1-Quarto_Website_Example
  
Output created: _site\index.html

Terminating existing preview server....DONE

Preparing to preview

Watching files for changes
Browse at http://localhost:7875/
GET: /
  

```

-   각 메세지들의 의미는 아래와 같습니다.

    -   `quarto preview index.qmd --to html --no-watch-inputs --no-browse` 메세지는 해당 명령줄이 실행되었음을 나타내며,

        -   preview 옵션은 문서의 미리보기가 제공되었음을 의미하며,
        -   `index.qmd`: 파일이 대상임을 의미합니다.
        -   `--to html`: HTML 형식으로 출력함을 의미하며,
        -   `--no-watch-inputs`: 이 옵션을 사용하면 파일 변경을 실시간으로 감지하지 않고, 수동으로 업데이트함을 의미합니다.
        -   `` --no-browse` `` 미리보기 시 브라우저 창이 자동으로 열리지 않도록 합니다.

    -   `processing file: index.qmd`는 index.qmd 파일을 처리하고 있음을 나타내며,

    -   `output file: index.knit.md`는 index.qmd 파일이 변환된 결과를 저장할 파일명을 나타냅니다. 하지만 Rendering이 완료되면 이 파일을 삭제되므로 실제로는 중간단계로만 사용됩니다.

    -   `pandoc to: html`은 pandoc이 html로 변환하도록 지정되어 있음을 나타내며,

    -   `pandoc output-file: index.html`은 변환된 파일의 이름을 나타냅니다.

    -   `pandoc standalone: true`는 변환된 파일이 독립적인 HTML 파일로 생성되도록 지정되어 있으며,

    -   `title-prefix: R-4.4.1-Quarto_Website_Example`은 변환된 HTML 파일의 제목을 나타냅니다.

    -   `section-divs: true`는 변환된 HTML 파일에 섹션을 나타내는 div 태그를 추가하도록 지정되어 있으며,

    -   `html-math-method: mathjax`는 수학식을 MathJax로 변환하도록 지정되어 있습니다.

    -   `wrap: none`은 변환된 HTML 파일에 줄 바꿈을 추가하지 않도록 지정되어 있으며,

    -   `default-image-extension: png`는 변환된 HTML 파일에 이미지를 PNG 형식으로 추가하도록 지정되어 있습니다.

    -   `- css: - styles.css`는 변환된 HTML 파일에 CSS 스타일을 적용하도록 지정되어 있으며,

    -   `- toc: true`는 변환된 HTML 파일에 toc(table of contents) 목차를 추가하도록 지정되어 있습니다.

    -   `metadata document-css: false`는 style.css 파일을 사용하도록 되어 있으므로 개별문서에 css가 포함되지 않도록 되었다는 의미입니다.

    -   `metadata link-citations: true`는 citation을 링크로 연결하도록 지정되어 있음을 나타냅니다.

    -   `metadata date-format: long`는 날짜포맷을 긴 형식으로 지정되어 있음을 나타냅니다. 에를 들어서 `27, october 2024`와 같은 포맷을 사용합니다.

    -   `metadata lang: en`는 언어가 지정되지 않았으므로 기본값인 영어로 지정되어 있음을 나타냅니다.

    -   `metadata editor: visual`는 Visual Markdown Editor 가 사용하도록 지정되어 있었다는 의미입니다.

    -   `metadata theme: cosmo`는 cosmo 테마를 사용하도록 지정되어 있음을 나타냅니다.

    -   `metadata title: R-4.4.1-Quarto_Website_Example`는 제목이 프로젝트폴더명으로 지정되어 있음을 나타냅니다.

    -   `Output created: _site\index.html`는 변환된 HTML 파일이 \_site 폴더에 index.html 파일로 생성되었음을 나타냅니다.

    -   `Terminating existing preview server....DONE`는 이전에 실행되었던 미리보기 서버를 중단하여 새로 렌더링된 파일이 보이도록 준비했다는 의미입니다. 이렇게 하면 이전 미리보기가 중단되고, 최신 렌더링 파일이 Viewer Pane에 표시됩니다.

    -   `Preparing to preview`는 렌더링된 파일을 미리보기하기 위해 준비되었음을 나타냅니다.

    -   `Watching files for changes`는 혼란스러운 표현이며, 아마도 아직 파일 변경을 감지하고 있음을 나타냅니다.

    -   `Browse at http://localhost:7875/`는 렌더링된 파일을 미리보기하기 위한 주소를 나타냅니다. no-browse 옵션을 사용했으므로 브라우저가 자동으로 열리지 않습니다. 따라서 주소를 복사하여 웹브라우저에 붙여넣기하여 미리보기를 할 수 있습니다. 그러나 Output Pane의 Viewer tab에 미리보기가 보이므로 브라우저를 열어 보아야 할 경우는 별도 없습니다.

    -   `GET: /`는 미리보기를 위해 서버에 요청을 보냈음을 나타냅니다.

-   Rendering에 따른 결과

    -   Rendering이 종료되면 Output pane Viewer tab에 index.html 파일의 미리보기가 나타납니다.
    -   보이지 않는다면 Render 옵션이 Preview in Viewer Pane으로 설정되어 있는지 확인하시길 바랍니다.
    -   Enviroment pane Git tab에서는 .gitignore 파일이 수정되었고 \_site/ 폴더가 새로 생성되었다는 표시가 보입니다.
    -   Output Pane의 File tab으로 확인을 해보면 \_site 폴더의 열어보면
    -   about.html
    -   index.html
    -   search.json
    -   site_libs
    -   style.css
    -   파일들과 폴더가 생성되었음을 알 수 있습니다.
    -   Source Pane의 .gitignore tab을 보면
        -   \`/.quarto/ 폴더가 버전관리 제외대상으로 자동으로 추가되었음을 알 수 있습니다.
            -   Output pane File tab을 refresh 시키거나 프로젝트를 폴더로 이동하는 등 refresh와 대등한 효과를 적용한 상태에서는 File tab에서도 .quarto 폴더가 확인됩니다.
                -   만약 보이지 않는다면 File tab의 more 옵션 중 숨김파일보기가 허용되도록 설정되어 있는지 확인해 보시길 바랍니다.
:::

![Render button in the RStudio IDE](images/RenderButton.JPG){#fig-RenderButton}

::: {.callout-note title="8단계: 출력폴더 변경하고 다시 rendering 하기" collapse="true" appearance="minimal"}
-   \_quarto.yml 파일의 project section에 아래와 같이 `output-dir: docs`코드를 추가합니다.

```{r _quarto.yml_output, eval=FALSE, filename="_quarto.yml"}
project:
  type: website
  output-dir: docs

website:
  title: "R-4.4.1-Quarto_Website_Example"
  navbar:
    left:
      - href: index.qmd
        text: Home
      - about.qmd

format:
  html:
    theme: cosmo
    css: styles.css
    toc: true

editor: visual
```

-   Rendering을 하면 `_site` 폴더가 아닌 `docs` 폴더에 변환된 파일이 저장됩니다. (Github page에 publish 하기 위해서는 docs 폴더가 필요합니다.)
-   \_siet는 이제 필요 없으므로 삭제 하시면 됩니다.
:::

```{r _quarto.yml_output_copy, eval=FALSE, filename="_quarto.yml"}
output-dir: docs
```

::: {.callout-note title="9단계: `index.qmd`에  내용 추가하기" collapse="true" appearance="minimal"}
-   index.qmd 파일을 열어서 아래의 코드를 추가합니다.

```{{r}}
#| label: fig-petct
#| fig-cap: "2023년도 FDG PET/CT 건수"
#| echo: false

library(rjson)
library(httr)
library(plyr)

download_api_data <- function() {
  base_url <- "http://apis.data.go.kr/B551182/mdlrtActionInfoService"
  call_url <- "getMdlrtActionByClassesStats"
  method <- "GET"
  My_API_Key <- "DRwFWZ/jfi6551teJKgRhkKgC+XhcjobN+ccY2MQdF9yZdx8xL5Kn4IljljMCWGsl2ObEco/rm21r14CN7iG0g=="  # 실제 API 키
  params <- list(
    serviceKey = My_API_Key,
    pageNo = 1,
    numOfRows = 10,
    resultType = "json",
    year = "2023",
    stdType = "1",
    st5Cd = "HK010"
  )
  
  # API 호출
  url <- paste0(base_url, "/", call_url)
  response <- GET(url, query = params)

  if (status_code(response) == 200) {
    json_text <- content(response, as = "text")
    data <- fromJSON(json_text)
    return(data)
  } else {
    print(paste("API 호출 실패:", status_code(response)))
    return(NULL)
  }
}

data <- download_api_data()
data_list<-data$response$body$items$item
df <- rbind.fill(lapply(data_list, as.data.frame))

barplot(df$totUseQty, 
        names.arg = df$diagCdNm)  # x축 레이블 설정
```

-   index.qmd를 rendering 하기 전에 코드에 사용된 rjson, httr, plyr 패키지를 설치해야 합니다.
-   자동으로 설치할 것으로 물어오지 않는다면, 아래의 renv::install 함수를 사용하여 설치하실 것을 추천합니다.

```{r install_rjson, eval=FALSE, filename="R Console Pane"}
renv::install("rjson")
```

```{r install_httr, eval=FALSE, filename="R Console Pane"}
renv::install("httr")
```

```{r install_plyr, eval=FALSE, filename="R Console Pane"}
renv::install("plyr")
```

-   이제 rendering을 해보면 index.html 파일에 barplot이 추가된 것을 확인할 수 있습니다.
:::

::: {.callout-note title="10단계: 최종버전 commit 해 두기" collapse="true" appearance="minimal"}
-   아래의 `git add .` 명령으로 프로젝트폴더 및 그 하위의 모든 폴더 및 파일들을 stage 영역으로 올립니다.

```{r git_add2, eval=FALSE, filename="RStudio Terminal pane"}
git add .
```

-   아래의 `git commit -m "message"`명령으로 stage 영역에 올라간 파일들을 로컬저장소에 커밋합니다.
    -   커밋 메시지는 해당 커밋의 내용을 요약하여 작성합니다.
    -   여기서는 예시도 "Second commit & for webpage test"로 작성하였고 원하시는 내용으로 작성하시면 됩니다.
:::

```{r git_commit2, eval=FALSE, filename="RStudio Terminal pane"}
git commit -m "Second commit & for webpage test"
```

::: {.callout-note title="11단계: Github 원격저장소 만들기" collapse="true" appearance="minimal"}
-   Github(<https://github.com/>) 계정이 없다면 계정 만들기
    -   자신의 이메일(예시 rpythonmember\@gmail.com)과 사용자명(예시 RPythonMember)으로 등록합니다.
        -   위의 예시는 연구회의 사용자명과 이메일이므로 이를 그대로 사용하시면 계정이 만들어지지 않습니다.
        -   자신의 운영체제에 Git 설치 시 global로 설정했던 자신의 user.name과 email을 재사용하는 것을 추천합니다.
        -   Sign up 과정에서 이메일로 코드를 전송받고 로그인시 입력하는 방식으로 가입을 완료하게 됩니다.
-   원격저장소 만들기
-   Github에 로그인을 하여 Dashboard가 나온다면 아래의 그림과 같이 Repository name에 `Quarto_Website_Example`을 default로 선택된 Private 대신 Public 라이오버튼을 선택하여 원격저장소를 생성합니다.\
    ![](images/CreatNewRepository.PNG) - public은 코드 공개를 의미합니다.
:::

```{r github_signup, eval=FALSE, filename="recommended new repository name"}
Quarto_Website_Example
```

::: {.callout-note title="12단계: Github 원격저장소 연결하기" collapse="true" appearance="minimal"}
-   RStudio Terminal tab에서 아래의 git 명령으로 로컬 PC의 자신의 project와 github 원격저장소를 연결합니다
    -   Github \<\> code 메뉴에서 Quick setup 내에 있는 URL이 원격저장소 주소입니다. ![](images/RemoteRepositoryURL.PNG)
    -   `git remote add origin` 명령에 이어서 원격저장소 URL의 기술해주면 연결됩니다.
    -   `git remote add origin`에서 origin은 원격 저장소의 이름(별칭)을 나타냅니다.
    -   연결 성공시에는 메세지가 없고 실패시에는 메세지가 출력됩니다.
    -   원격 저장소의 연결 상태를 확인하고자 한다면 아래의 git 명령을 사용하시면 됩니다.

```{r git_remote_v, eval=FALSE, filename="RStudio Terminal pane"}
git remote -v
```

-   아래와 같은 방식으로 출력이 보이면 원격저장소가 연결된 것입니다.
-   실제로는 자신의 원격저장소의 url이 보이게 됩니다.

```{r git_remote_V_output, eval=FALSE, filename="git log output"}
C:\Projects\R-4.4.1-Quarto_Website_Example>git remote -v
origin  https://github.com/RPythonMember/Quarto_Website_Example.git (fetch)
origin  https://github.com/RPythonMember/Quarto_Website_Example.git (push)
```
:::

```{r git_remote, eval=FALSE, filename="RStudio Terminal pane"}
git remote add origin https://github.com/RPythonMember/Quarto_Website_Example.git
```

::: {.callout-note title="13단계: 원격저장소에 파일올리기" collapse="true" appearance="minimal"}
-   Github 원격저장소에 파일을 올리는 것을 push라고 합니다.
-   아래의 git push 명령으로 프로젝트 파일들을 올립니다.
-   origin은 원격저장소의 별칭입니다.
-   main은 branch의 이름입니다.
-   완료되면 github 원격저장소 화면을 refresh하면 아래의 그림과 같이 파일들이 올라간 것을 확인할 수 있습니다.

![](images/refrashed.PNG)
:::

```{r git_push, eval=FALSE, filename="RStudio Terminal pane"}
git push origin main
```

::: {.callout-note title="14단계: Pages 설정하기" collapse="true" appearance="minimal"}
-   Github의 Settings를 클리하면 그림과 같이 사이드메뉴 하단에 Pages 기능을 선택할 수 있습니다.
![](images/Pages.PNG)
-   Pages를 선택하면 아래의 그림과 같이 Branch를 None에서 우리가 upload한 brach인 main선택할 수 있습니다.
![](images/main.PNG)
- 폴더를 root에서 변경할 수 있는데 단지 docs로만 변경이 가능하므로 주의를 요합니다.
  - 이것 때문에 프로젝트 output-dir을 docs로 설정하였던 것입니다.
![](images/docs.PNG)  
- save하여 화면을 refresh 해보면 웹페이지 url이 그림과 같이 나타납니다.
![](images/siteURL.PNG)
- 위의 주소가 웹페이지 주소이며 완성입니다.

:::

::: {.callout-note title="마지막단계: 웹페이지 접속으로 확인하기" collapse="true" appearance="minimal"}
-  아래의 그림에서 visit site를 클릭하면 웹페이지가 보이는 것을 확인할 수 있습니다.
![](images/siteURL.PNG)
- 위 주소를 자신의 브라우저에 입력해서도 웹페이지가 보이게 됩니다.

:::

