---
title: "R_Quiz"
filters: 
  - shinylive
---


```{shinylive-r}
#| standalone: true
#| viewerHeight: 800

library(shiny)
library(shinydashboard)
library(readxl)

# UI 구성
ui <- dashboardPage(
  dashboardHeader(title = "R 퀴즈"),
  
  dashboardSidebar(
    sidebarMenu(
      menuItem("파일입출력", tabName = "file_io", icon = icon("folder"),
               menuSubItem("엑셀파일 읽어오기", tabName = "excel_import", icon = icon("file-excel")),
               menuSubItem("CSV 파일 읽어오기", tabName = "csv_import", icon = icon("file-csv"))
      ),
      menuItem("To be determined", tabName = "others", icon = icon("tasks"))
    )
  ),
  
  dashboardBody(
    tabItems(
      # 엑셀파일 읽어오기 탭
      tabItem(tabName = "excel_import",
              fluidPage(
                titlePanel("엑셀파일 읽어오기"),
                
                fluidRow(
                  column(12,
                         p("R에서 Excel 파일을 읽어오는 주요 함수들은 다음과 같습니다:"),
                         tags$ul(
                           tags$li("`read_excel()` (from `readxl` package)"),
                           tags$li("`read.xlsx()` (from `openxlsx` package)"),
                           tags$li("`xlsx::read.xlsx()` (from `xlsx` package)"),
                           tags$li("`readWorkbook()` (from `XLConnect` package)"),
                           tags$li("`read_xlsx()` (from `readr` package)")
                         ),
                         p("`read_excel` 함수는 R에서 Excel 파일을 읽어오는 가장 널리 사용되는 함수 중 하나입니다. 다음은 `read_excel` 함수의 주요 인자와 기본값에 대한 설명입니다:"),
                         tags$ul(
                           tags$li("`path`: 읽어올 Excel 파일의 경로를 지정합니다. (예: `\"data.xlsx\"`)"),
                           tags$li("`sheet`: 읽어올 시트의 이름 또는 번호를 지정합니다. 기본값은 첫 번째 시트입니다. (기본값: `1`)"),
                           tags$li("`range`: 특정 범위의 셀을 읽어올 때 사용됩니다. 범위를 지정하지 않으면 전체 시트를 읽습니다. (기본값: `NULL`)"),
                           tags$li("`col_names`: `TRUE`로 설정하면 첫 번째 행이 열 이름으로 사용됩니다. (기본값: `TRUE`)"),
                           tags$li("`col_types`: 열의 데이터 타입을 지정합니다. 자동으로 감지되지만, 필요에 따라 수동으로 지정할 수 있습니다. (기본값: `NULL`)")
                         ),
                         p("아래에 `read_excel` 함수를 사용하여 프로젝트 폴더의 `test.xlsx` 파일을 읽어서 `raw_data` 변수에 할당하는 코드를 작성하세요."),
                         
                         textAreaInput("user_code", "R 코드 입력:", value = "", rows = 5, width = '100%'),
                         actionButton("submit", "실행 및 결과확인")
                  )
                ),
                
                fluidRow(
                  column(12,
                         h4("실행 결과"),
                         verbatimTextOutput("result"),
                         h4("출제자가 생각한 코드"),
                         verbatimTextOutput("correct_code"),
                         h4("피드백"),
                         verbatimTextOutput("feedback")
                  )
                )
              )
      ),
      
      # CSV 파일 읽어오기 탭
      tabItem(tabName = "csv_import",
              fluidPage(
                titlePanel("CSV 파일 읽어오기"),
                
                fluidRow(
                  column(12,
                         p("R에서는 CSV 파일을 읽어오는 다양한 함수가 제공됩니다. 주요 함수들은 다음과 같습니다:"),
                         tags$ul(
                           tags$li("`read.csv()` (기본 R 함수)"),
                           tags$li("`read_csv()` (from `readr` package)"),
                           tags$li("`fread()` (from `data.table` package)")
                         ),
                         p("`read.csv` 함수는 R에서 CSV 파일을 읽어오는 가장 널리 사용되는 기본 함수입니다. 다음은 `read.csv` 함수의 주요 인자와 기본값에 대한 설명입니다:"),
                         tags$ul(
                           tags$li("`file`: 읽어올 CSV 파일의 경로를 지정합니다."),
                           tags$li("`header`: 첫 번째 행을 열 이름으로 사용할지 여부를 지정합니다. (기본값: `TRUE`)"),
                           tags$li("`sep`: 필드를 구분하는 문자를 지정합니다. CSV의 경우 기본값은 쉼표(`,`)입니다. (기본값: `\",\"`)"),
                           tags$li("`quote`: 문자 데이터에서 사용되는 인용 부호를 지정합니다. (기본값: `\"\\\"\"`)"),
                           tags$li("`dec`: 소수점을 나타내는 문자를 지정합니다. (기본값: `\".\"`)"),
                           tags$li("`fill`: 열이 다른 행보다 적을 경우, 빈 값을 자동으로 채울지 여부를 지정합니다. (기본값: `TRUE`)"),
                           tags$li("`comment.char`: 주석으로 간주할 시작 문자를 지정합니다. (기본값: `\"\"`)")
                         ),
                         p("아래에 `read.csv` 함수를 사용하여 프로젝트 폴더의 `test.csv` 파일을 읽어서 `raw_data` 변수에 할당하는 코드를 작성하세요."),
                         
                         textAreaInput("user_code_csv", "R 코드 입력:", value = "", rows = 5, width = '100%'),
                         actionButton("submit_csv", "실행 및 결과확인")
                  )
                ),
                
                fluidRow(
                  column(12,
                         h4("실행 결과"),
                         verbatimTextOutput("result_csv"),
                         h4("출제자가 생각한 코드"),
                         verbatimTextOutput("correct_code_csv"),
                         h4("피드백"),
                         verbatimTextOutput("feedback_csv")
                  )
                )
              )
      ),
      
      # 다른 기능이 포함된 탭 (현재는 내용 없음)
      tabItem(tabName = "others",
              h2("To be determined"),
              p("이 탭에는 다른 다양한 R 기능 및 퀴즈를 추가할 수 있습니다.")
      )
    )
  )
)

# 서버 로직
server <- function(input, output) {
  # 엑셀파일 읽어오기
  observeEvent(input$submit, {
    user_code <- input$user_code
    
    correct_code <- 'raw_data <- read_excel("test.xlsx")'
    output$correct_code <- renderText({ correct_code })
    
    result <- tryCatch({
      eval(parse(text = user_code))
    }, error = function(e) {
      paste("코드 실행 중 오류가 발생했습니다:", e$message)
    })
    
    output$result <- renderPrint({
      if (is.character(result) && grepl("오류", result)) {
        print(result)
      } else if (identical(result, read_excel("test.xlsx"))) {
        cat("주의사항: 실행결과가 없는 코드이지만 변수에 적절히 할당된 것을 아래에서 알 수 있습니다.\n\n")
        str(result)
      } else if (is.null(result)) {
        cat("실행결과가 없는 코드입니다.")
      } else {
        print(result)
      }
    })
    
    output$feedback <- renderText({
      if (is.character(result) && grepl("오류", result)) {
        "코드에 오류가 있습니다. 다시 시도해 보세요."
      } else if (!is.null(result) && identical(result, read_excel("test.xlsx"))) {
        "일치합니다."
      } else if (exists("raw_data")) {
        "데이터는 할당되었지만, 내용이 올바르지 않습니다. 파일 경로와 인자를 확인하세요."
      } else {
        "raw_data에 데이터를 할당하지 못했습니다."
      }
    })
  })
  
  # CSV 파일 읽어오기
  observeEvent(input$submit_csv, {
    user_code_csv <- input$user_code_csv
    
    correct_code_csv <- 'raw_data <- read.csv("test.csv")'
    output$correct_code_csv <- renderText({ correct_code_csv })
    
    result_csv <- tryCatch({
      eval(parse(text = user_code_csv))
    }, error = function(e) {
      paste("코드 실행 중 오류가 발생했습니다:", e$message)
    })
    
    output$result_csv <- renderPrint({
      if (is.character(result_csv) && grepl("오류", result_csv)) {
        print(result_csv)
      } else if (identical(result_csv, read.csv("test.csv"))) {
        cat("주의사항: 실행결과가 없는 코드이지만 변수에 적절히 할당된 것을 아래에서 알 수 있습니다.\n\n")
        str(result_csv)
      } else if (is.null(result_csv)) {
        cat("실행결과가 없는 코드입니다.")
      } else {
        print(result_csv)
      }
    })
    
    output$feedback_csv <- renderText({
      if (is.character(result_csv) && grepl("오류", result_csv)) {
        "코드에 오류가 있습니다. 다시 시도해 보세요."
      } else if (!is.null(result_csv) && identical(result_csv, read.csv("test.csv"))) {
        "일치합니다."
      } else if (exists("raw_data")) {
        "데이터는 할당되었지만, 내용이 올바르지 않습니다. 파일 경로와 인자를 확인하세요."
      } else {
        "raw_data에 데이터를 할당하지 못했습니다."
      }
    })
  })
}

# 앱 실행
shinyApp(ui = ui, server = server)
```


