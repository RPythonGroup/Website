---
title: "VS Code Setup"
description: "Guidance on Installing and Configuring VS Code"
author: "RPythonStudyGroup feat. ChatGPT"
date: "2024-08-31"
date-modified: "2024-09-29"
categories:
  - Python
  - VS Code
  - setup
---

::: {.content-visible when-profile="ko"}
## Python 통합개발환경 선택

Python 개발에 적합한 다양한 통합 개발 환경(IDE) 중에서 PyCharm은 강력한 기능과 Django 통합을 제공하지만 시스템 자원을 많이 소모하며 유료입니다. Jupyter Notebook은 데이터 과학에 최적화되어 있지만, 대규모 코드베이스 관리나 전통적인 IDE 기능에는 제한이 있습니다. Spyder는 과학 계산에 특화되어 있으나, 범용 개발에는 한계가 있습니다. 반면, Visual Studio Code (VS Code)는 확장성이 뛰어나며 다양한 프로그래밍 언어 지원과 시스템 자원 소모가 적은 경량의 IDE로, 필요에 따라 확장 기능을 추가할 수 있어 Python 개발을 포함한 여러 프로젝트를 효과적으로 관리할 수 있습니다. 연구회에서는 Python 개발에 VS Code를 우선 추천합니다.

## 설치 안내

공식문서(<https://code.visualstudio.com/docs/setup/setup-overview>)에서 자신의 운영체제에 맞는 안내를 참조하는 것이 이상적이며, 아래와 같이 간단한 안내에 따라 설치하셔도 됩니다.

## 설치 파일

공식 웹사이트(<https://code.visualstudio.com/Download>)에서 운영 체제에 맞는 최신 설치 파일을 다운로드하고 설치합니다. Window 운영체제에서 몇가지 선택이 가능한데 System installer (모든 사용자들이 VS Code가 사용가능한 설치파일)를 추천하며, 2024년 9월 29일 기준으로 Windows 운영 체제에는 VSCodeSetup-1.93.1.exe 파일이 최신입니다.

## 설치 경로

Window 운영체제의 경우 기본 설치경로는 `C:\Users\{Username}\AppData\Local\Programs\Microsoft VS Code`이며 이를 추천합니다.

## 설정

### VS Code 레이아웃

설정을 설명함에 있어 VS Code 공식문서(<https://code.visualstudio.com/docs>)에서 사용된 용어를 사용하고자 합니다. 레이아웃 구성요소에 대한 용어는 @fig-BasicLayout 을 참고하시길 바랍니다. 그러나 "타이틀 및 메뉴 바"와 같은 용어는 공식 문서에 명시적으로 정의되지 않았지만 명확한 설명을 위해 필요하다고 생각되어 여기에서는 임의적으로 정의하여 사용하겠습니다.
:::

::: {.content-visible when-profile="en"}
## Choosing a Python Integrated Development Environment (IDE)

There are various Integrated Development Environments (IDEs) suitable for Python development. PyCharm offers powerful features and Django integration but consumes significant system resources and is a paid tool. Jupyter Notebook is optimized for data science but has limitations in managing large codebases and traditional IDE features. Spyder is specialized for scientific computing but has limitations for general-purpose development. On the other hand, Visual Studio Code (VS Code) is a lightweight IDE with excellent extensibility, supporting various programming languages and consuming fewer system resources. It allows effective management of multiple projects, including Python development, by adding extension features as needed. The study group recommends VS Code for Python development.

## Installation Guidance

It is ideal to refer to the official documentation (https://code.visualstudio.com/docs/setup/setup-overview) for installation instructions tailored to your operating system. However, you can follow the simple guidance below to install VS Code.

## Installation File

Download the latest installation file suitable for your operating system from the official website (https://code.visualstudio.com/Download). For Windows, the System installer (an installation file that makes VS Code available to all users) is recommended. As of September 29, 2024, the latest file for Windows is VSCodeSetup-1.93.1.exe.

## Installation Path

For Windows, the default installation path is `C:\Users\{Username}\AppData\Local\Programs\Microsoft VS Code`, which is recommended.

## Configuration

### VS Code Layout

In explaining the configuration, the terms used in the official VS Code documentation (https://code.visualstudio.com/docs) are adopted. The terms for layout components are referenced in @fig-BasicLayout. However, terms such as "title & menu bar" are not explicitly defined in the official documentation but are used here for clarity.
:::

![Basic layout of VS Code](image/BasicLayout.png){#fig-BasicLayout}

::: {.content-visible when-profile="ko"}
### Python 확장(기능) 설치

VS Code에서 Python을 실행코드를 작성 및 실행할려면 Python이라는 확장(기능)을 설치해야 합니다. VS Code를 처음 실행하면 환영 페이지가 표시됩니다. 이 페이지에서 Python 확장을 설치하거나 대신 Ⓐ Activity bar의 확장 메뉴를 사용하여 설치할 수 있습니다. 설치된 확장 프로그램은 확장 프로그램 메뉴의 INSTALLED 섹션에서 확인할 수 있습니다 (@fig-PythonExtension). 이로써 VS code에서 Python을 사용할 수 있는 기본적인 설정을 되었습니다.
:::

::: {.content-visible when-profile="en"}
### Installing Python Extensions

To write and execute Python code in VS Code, you need to install the Python extension. When you first launch VS Code, the Welcome page will appear. Install the Python extension from this page, or alternatively, use the Extensions menu in the Activity Bar (Ⓐ). Once installed, the extension can be verified under the INSTALLED section in the Extensions menu (@fig-PythonExtension). This completes the basic setup for using Python in VS Code.
:::

![Python Extension in VS Code](image/PythonExtension.png){#fig-PythonExtension}

::: {.content-visible when-profile="ko"}
### Python 가상환경 설정

#### 프로젝트별 관리를 위한 가상환경 설정의 필요성

파이썬 가상 환경은 개발자가 각기 다른 프로젝트에서 필요로 하는 다양한 라이브러리와 파이썬 버전을 독립적으로 관리할 수 있게 해줍니다. 이는 서로 다른 의존성 요구 사항을 가진 여러 프로젝트를 동일한 시스템에서 충돌 없이 운영할 수 있도록 하며, 개발 환경을 격리시켜 한 프로젝트에서 발생하는 문제가 다른 프로젝트에 영향을 미치지 않도록 합니다. 또한, 가상 환경은 프로젝트의 특정 설정을 쉽게 다른 환경으로 복제하거나 배포할 수 있도록 지원함으로써, 개발과 테스트, 프로덕션 환경 간의 일관성을 유지할 수 있게 해주고, 팀 작업에서도 각 개발자가 동일한 설정에서 작업할 수 있도록 도와줍니다. 이러한 이유로, 가상 환경은 프로젝트의 안정성과 개발 효율성을 크게 향상시키는 중요한 도구입니다. 다음은 VS Code에서 Python 가상 환경을 구현하는 방법을 설명합니다.

#### 프로젝트 폴더 생성

대부분의 프로그램처럼 Python도 프로젝트 관리는 폴더단위이며 가상환경도 프로젝트 폴더마다 만들어야 합니다. 그러나 VS Code에서는 폴더를 직접 생성할 수 있는 옵션이 없습니다. 따라서 프로젝트 폴더를 만들기 위해 Windows 탐색기를 사용하는 것이 좋습니다. (대신 VS Code의 타이틀 및 메뉴 바에 있는 터미널 탭을 사용하여 프로젝트 폴더를 만들 수 있지만, 이 방법은 Windows 탐색기를 사용하는 것보다 더 번거로울 수 있습니다.) 예를 들어 프로젝트 폴더를 다음과 같이 이름을 지어 만듭니다(예: C:\\Projects\\Python-x.y.z-Project_Name).

#### 프로젝트 폴더 열기

탐색기 메뉴(Ⓐ Activity bar)나 타이틀 및 메뉴 바의 파일 메뉴를 사용하여 프로젝트 폴더를 엽니다. (이는 이후에 터미널을 열 때, 프로젝트 폴더에서 열리게 하기 위함입니다.)

#### 터미널 생성

타이틀 및 메뉴 바에서 터미널(T) 메뉴 하부의 새터미널 메뉴를 선택하여 새로운 터미널을 Ⓓ 패널에 열리게 합니다. 이 떄 열린 터미널이 만약 powershell이라면 패널 타이틀 바 우측에 있는 `+(새 터미널)` 기호 옆의 `v(시작 프로필)`메뉴를 선택하고 (@fig-CommandPrompt), 터미널의 종류를 `Command Prompt`를 선택하여 새로운 Command Prompt 터미널을 생성해 줍니다.
:::

::: {.content-visible when-profile="en"}
### Python Virtual Environment Setup

#### Importance of Virtual Environment Setup for Project Management

Python virtual environments allow developers to manage various libraries and Python versions independently for different projects. This enables multiple projects with different dependency requirements to operate on the same system without conflicts, isolates the development environment to prevent issues in one project from affecting others, and supports easy replication or deployment of specific project settings to different environments. It helps maintain consistency between development, testing, and production environments, and enables team collaboration by allowing each developer to work in the same settings. For these reasons, virtual environments are essential tools that significantly enhance project stability and development efficiency.

The following explains how to implement Python virtual environments in VS Code.

#### Creating a Project Folder

Like most programs, Python also manages projects at the folder level, and virtual environments should be created for each project folder. However, VS Code does not offer a direct option to create folders. Therefore, it is recommended to use Windows Explorer to create your project folder. (Alternatively, you can create the project folder using the Terminal tab in the Main Menu Bar of VS Code, but this approach may be more cumbersome than using Windows Explorer.) Name the project folder following the example (e.g., C:\\Projects\\Python-x.y.z-Project_Name).

#### Opening the Project Folder

Open the project folder using the Explorer menu (Ⓐ Activity Bar) or the File menu in the title & menu bar. This ensures that when you open a Terminal, it will be in the context of the project folder.

#### Creating a Terminal

In the title & menu bar, open a Terminal via the Terminal tab, which will launch PowerShell within the project folder. If the terminal is PowerShell, select the `v(Select Default Profile)` menu next to the `+(New Terminal)` icon on the right side of the panel title bar (@fig-CommandPrompt), and choose `Command Prompt` to create a new Command Prompt terminal.
:::

![Command Prompt Terminal Creating](image/CommandPrompt.png){#fig-CommandPrompt}

::: {.content-visible when-profile="ko"}
#### Python 가상 환경 생성

터미널에서 다음 명령을 실행합니다.
:::

::: {.content-visible when-profile="en"}
#### Creating a Python Virtual Environment

In the terminal, execute the following command.
:::

```{r Python_virtual_ko, eval=FALSE, filename="Command Prompt Terminal"}
python -m venv venv
```

::: {.content-visible when-profile="ko"}
위 명령의 실행결과로써 프로젝트 폴더아래에 venv 가상화폴더가 생성되었습니다. 이는 탐색기 의 프로젝트폴더 아래에 venv라는 폴더가 보이면 성공한 것입니다 (@fig-VenvValidation).
:::

::: {.content-visible when-profile="en"}
The execution of the above command will create a virtual environment folder named venv under the project folder. If you see a folder named venv under the project folder in the Explorer, the process was successful (@fig-VenvValidation).
:::

![Validation of venv Folder Creation](image/VenvValdiation.png){#fig-VenvValidation}

::: {.content-visible when-profile="ko"}
#### 특정 프로젝트 폴더와 특정 Python 가상환경의 연결

`타이틀과 메뉴 바`의 `보기(V)` 메뉴에서 `명령 팔레트` 메뉴를 선택하면, 선택가능한 명령들이 리스트로 조회되며 이 중에서 `Python: 인터프리터 선택` 메뉴를 선택합니다 (@fig-SelectInterpreter).
:::

::: {.content-visible when-profile="en"}
#### Linking a Specific Project Folder with a Specific Python Virtual Environment

Select View from the title menu and choose Command Palette. Then select Python: Select Interpreter from the list of available commands (@fig-SelectInterpreter).
:::

![Select Interpreter in Command Palette](image/SelectInterpreter.png){#fig-SelectInterpreter}

::: {.content-visible when-profile="ko"}
위의 선택에 따라 현재 상황에서 선택 가능한 모든 Python 인터프리터가 조회되며, 이중에서 직전에 만든 프로젝트 폴더 아래의 venv 가상화폴더 아래의 Scripts 폴더 내의 python.exe를 선택합니다 (@fig-InterpreterSelection).
:::

::: {.content-visible when-profile="en"}
Upon selection, all available Python interpreters will be displayed. Choose the python.exe file located in the Scripts folder under the venv virtual environment folder created in the project folder (@fig-InterpreterSelection).
:::

![Interpreter Selection](image/InterpreterSelection.png){#fig-InterpreterSelection}

::: {.content-visible when-profile="ko"}
#### 가상환경 활성화의 확인

가상환경의 python 인터프리터를 선택하여 특정 프로젝트와 특정 가상환경의 인터프리터를 연결하더라도 화면에서는 아무런 변화가 없습니다. 오류없이 연결이 잘 되었는지 확인은 새 터널을 생성하면 @fig-ValidationVertualization 에서의 같이 터미널의 프롬프트에 `(venv)`의 가상화폴더를 괄호로 둘러싼 것이 보이게 되며, 이를 통해 성공적인 연결을 확인할 수 있으며 현재 가상화가 활성화되어 있음을 알 수 있습니다.
:::

::: {.content-visible when-profile="en"}
#### Verification of Virtual Environment Activation

Even after linking the Python interpreter of the virtual environment to a specific project, there will be no visible changes on the screen. To confirm that the connection was successful, open a new terminal. If you see the virtual environment folder `(venv)` enclosed in parentheses in the terminal prompt, as shown in @fig-ValidationVertualization, it indicates a successful connection. This confirms that the virtual environment is currently active.
:::

![Validation of Virtual Environment Activation](image/ValidationVirtualization.png){#fig-ValidationVertualization}

::: {.content-visible when-profile="ko"}
#### 프로젝트 설정의 저장

프로젝트폴더에 가상환경설정까지 마친 후 이 상태를 저장해 둘 수 있습니다. 이를 위해 `타이틀 및 메뉴 바`의 `파일(F)` 메뉴에서 `작업영역을 다름이름으로 저장` 메뉴를 선택하면 됩니다 (@fig-WorskspaceSaveas).
:::

::: {.content-visible when-profile="en"}
#### Saving Project Configuration

After completing the virtual environment setup in the project folder, you can save this state. To do this, select Save Workspace As from the File menu in the title & menu bar (@fig-WorskspaceSaveas).
:::

![Workspaces Save as function in File Menu](image/WorkspaceSaveas.png){#fig-WorskspaceSaveas}

::: {.content-visible when-profile="ko"}
이 때 프로젝트 폴더에 프로젝트폴더이름.code-workspace 파일이 만들어지면 프로젝트폴더의 설정이 저장됩니다 (@fig-CodeWorkspace).
:::

::: {.content-visible when-profile="en"}
When this action is performed, a projectfoldername.code-workspace file will be created in the project folder, saving the project folder's configuration (@fig-CodeWorkspace).
:::

![code-workspace File Creation](image/CodeWorkspace.JPG){#fig-CodeWorkspace}
