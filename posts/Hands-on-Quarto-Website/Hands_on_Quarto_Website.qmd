---
title: "Hands-on Quarto Website" 
description:  "A hands-on step by step tutorial to create a website using Quarto."
author: "RPythonStudyGroup feat. ChatGPT"
date: "2024-10-26"
date-modified: "2024-10-27"
categories:
  - Quarto
  - website
  - hands-on
---

1단계: `Quarto_Website_Example` R프로젝트 만들기

::: {.callout-note title="1단계 예시" collapse="true" appearance="minimal"}
-   RStudio/File 메뉴에서 `New Project...` 메뉴 선택
-   `New Directory`에 생성되도록 선택
-   Project type은 `Quarto Website`를 선택
-   상위폴더가 `C:/Projects`인지 확인 (=Global Options 사전 지정값)
-   Directory name은 `R-4.4.1-Quarto_Website_Example`로 지정

```{r git_example, eval=FALSE, filename="recommeded project name"}
R-4.4.1-Quarto_Website_Example
```

-   \[\] Create a git repository: 체크 유지하여 버전관리 적용
-   \[\] Use renv with this project: 체크 유지하여 패키지 독립관리 적용
-   \[\] Use visual markdown editor: 체크 유지하여 wizwig 에디터 사용
-   Quarto website 특이적 파일생성을 Output pane에서 확인할 수 있습니다.
    -   `_quarto.yml`: 전역옵션, 경로, 출력 등의 Quarto 전반의 설정 구성 파일
    -   `about.qmd`: 컨텐츠 파일로 웹페이지 전반에 대한 소개 역할
    -   `index.qmd`: 컨텐츠 파일로 웹페이지의 시작페이지 역할
    -   `style.css`: 스타일시트 파일로 웹페이지의 디자인을 담당
:::

2단계: `.gitignore` 파일 수정하기

::: {.callout-note title="2단계 예시" collapse="true" appearance="minimal"}
-   `.gitignore` 파일을 열어서 아래의 내용을 추가하여 git 버전관리에서 제외합니다.

```{r gitignore_add, eval=FALSE, filename=".gitignore"}
.Rprofile
*.Rproj
renv/
```
:::

3단계: `Quarto_Website_Example` 원격저장소 만들기

::: {.callout-note title="3단계 예시" collapse="true" appearance="minimal"}
-   Github(<https://github.com/>) 계정이 없다면, 자신의 이메일(예시 rpythonmember\@gmail.com)과 사용자명(예시 RPythonMember)으로 등록합니다 (연구회의 사용자명과 이메일이 아닙니다). Git 설치 시 global로 설정했던 user.name과 email을 재사용하는 것을 추천합니다.
-   로그인을 한 후 `Quarto_Website_Example`을 생성합니다.
-   코드의 공개여부를 의미하는 private와 public 중 공개를 의미하는 public을 선택하여 진행합니다.

```{r github_signup, eval=FALSE, filename="create new repository"}
Quarto_Website_Example
```
:::

4단계: 원격저장소 연결하기

::: {.callout-note title="4단계 예시" collapse="true" appearance="minimal"}
-   Github \<\> code 메뉴에서 Quick setup 내에 있는 URL이 원격저장소 주소입니다. 이를 이용하여 Terminal pane에서 아래의 git 명령어를 실행하여 원격저장소를 연결합니다.

```{r git_remote, eval=FALSE, filename="RStudio Terminal pane"}
git remote add origin https://github.com/RPythonMember/Quarto_Website_Example.git
```

-   위는 예시이며 사용자마다 Guthub username이 다르므로 자신의 원격저장소 주소를 사용하셔야 합니다.
-   `git remote add origin`에서 origin은 원격 저장소의 이름(별칭)을 나타냅니다.
-   아래의 명령으로 원격 저장소의 연결 상태를 확인합니다.

```{r git_remote_v, eval=FALSE, filename="RStudio Terminal pane"}
git remote -v
```

-   아래와 같은 출력이 보이면 원격저장소가 연결된 것입니다.

```{r git_remote_V_output, eval=FALSE, filename="git log output"}
C:\Projects\R-4.4.1-Quarto_Website_Example>git remote -v
origin  https://github.com/RPythonMember/Quarto_Website_Example.git (fetch)
origin  https://github.com/RPythonMember/Quarto_Website_Example.git (push)
```
:::

5단계: `index.qmd` 파일구조 이해하기

::: {.callout-note title="5단계 예시" collapse="true" appearance="minimal"}
-   \*.qmd 파일은 아래와 같이 3부분으로 구성되어 있습니다.
-   첫번째 부분은 YAML 헤더로, 문서의 메타데이터를 정의합니다. 여기에는 문서의 제목, 저자, 날짜, 카테고리 등이 포함됩니다.
-   두번째 부분은 마크다운(Markdown)으로, 문서의 본문을 작성합니다. 마크다운은 텍스트 기반의 마크업 언어로, HTML보다 간단하게 문서를 작성할 수 있습니다.
-   세번째 부분은 코드 블록으로, R 코드를 실행하고 결과를 출력합니다. 코드 블록은 마크다운 문서 내에서 코드를 실행하고 결과를 보여주는 기능을 제공합니다.
-   index.qmd 파일은 아래와 같이 작성되어 있습니다.

````         
---
title: "R-4.4.1-Quarto_Website_Example"
---

This is a Quarto website.

To learn more about Quarto websites visit <https://quarto.org/docs/websites>.

```{{r}}
1 + 1
```
````

-   Rendering하면 index.qmd는 index.html 파일로 변환되게 되며 website에서 사용자에게 가장 먼저 보여지는 페이지가 됩니다.
:::

6단계: \`\_quarto.yml 기본설정 이해하기

::: {.callout-note title="6단계 예시" collapse="true" appearance="minimal"}
-   YML 파일은 YAML(야믈) 형식으로 작성된 설정 파일입니다. YAML은 Yet Another Markup Language의 약자로, 사람이 읽기 쉽고 작성하기 용이한 데이터 직렬화 언어입니다. 특히 들여쓰기를 통해 데이터 구조를 계층적으로 표현하여 가독성이 뛰어나며, JSON이나 XML보다 간결한 형식으로 자주 사용됩니다.
-   Quarto 프로젝트에서는 \_quarto.yml 파일을 통해 프로젝트의 전반적인 설정을 관리하고, Docker에서는 docker-compose.yml 파일을 사용하여 컨테이너 설정을 정의합니다. YAML은 파이썬(Python), 루비(Ruby) 등 많은 프로그래밍 언어와 잘 연동되며, GitLab CI/CD나 GitHub Actions 등에서도 빌드 및 배포 파이프라인을 정의하는 데 많이 쓰입니다.
-   YML 파일 작성 시, 일반적으로 공백으로 들여쓰기를 사용하고, 탭을 사용하지 않아야 합니다. 잘못된 들여쓰기는 파싱 오류를 발생시킬 수 있어 주의가 필요합니다.
-   \_quarto.yml 파일은 아래와 같이 작성되어 있습니다.

```{r _quarto.yml, eval=FALSE, filename="_quarto.yml"}
project:
  type: website

website:
  title: "R-4.4.1-Quarto_Website_Example"
  navbar:
    left:
      - href: index.qmd
        text: Home
      - about.qmd

format:
  html:
    theme: cosmo
    css: styles.css
    toc: true

editor: visual
```

-   project type은 project 생성 시 설정한대로 website로 이미 지정되어 있습니다.
-   website의 title은 project folder name을 그대로 가져옵니다.
-   navbar 설정은 홈페이지의 상단 메뉴를 정의합니다. Home과 about 페이지가 기본 예시로 만들어져 있습니다.
-   left는 홈페이지 상단 메뉴의 정렬을 좌측으로 설정하는 것입니다.
-   href는 hypertext reference의 href: index.qmd는 해당메뉴를 선택 시 index.qmd로 하이퍼링크가 됩니다.
-   text는 메뉴에 표시되는 이름입니다.
-   about.qmd에서 처럼 text를 지정하지 않으면 파일명이 메뉴에 표시됩니다.
-   format은 website를 만드는 프로젝트이므오 html로 지정되어 있습니다.
-   theme은 cosmo로 지정되어 있습니다.
-   css는 Cascading Style Sheets의 약자로 웹페이지의 레이아웃과 스타일을 지정하는 언어로, HTML이나 XML로 작성된 콘텐츠의 글꼴, 색상, 간격, 레이아웃 등을 정의합니다. CSS는 콘텐츠와 디자인을 분리하여 코드의 가독성을 높이고 유지 관리를 쉽게 할 수 있도록 해줍니다.
-   editor는 visual로 지정되어 있으며 프로젝트 생성 시 Visual Markdown Editor 옵션을 선택한 결과입니다. RStudio에서 Source와 Visual을 선택하여 편집할 수 있는 기능과 연관이 있으며, 이 설정이 활성화되면 마크다운 파일을 직접 코딩하지 않고도 미리보기를 보면서 편집할 수 있는 Visual 모드가 기본으로 열리게 됩니다.
:::

7단계: `style.css` 파일내용 확인하기

::: {.callout-note title="7단계 예시" collapse="true" appearance="minimal"}
-   파일을 여러 내용을 보면 아래와 같이 아직 주석만 있고 어떠한 설정도 되어 있지 않은 상태입니다.

```{r style.css, eval=FALSE, filename="style.css"}
/* css styles */
```

-   원하는 설정을 추가해 둔다면 rendering 단계에서는 그대로 진행되지만 website에 올라간 이후에는 html 파일이 사용자에게 보여지는 스타일이 설정되로 달라지게 됩니다.
:::

8단계: 버전관리 첫번째 복원시점 설정하기

::: {.callout-note title="8단계 예시" collapse="true" appearance="minimal"}
-   git 버전관리 학습을 위한 단계이기도 합니다.
-   아래의 git 명령으로 프로젝트폴더 및 그 하위의 모든 폴더 및 파일들을 stage 영역으로 올립니다.

```{r git_add, eval=FALSE, filename="RStudio Terminal pane"}
git add .
```

-   아래의 git 명령으로 stage 영역에 올라간 파일들을 로컬저장소에 커밋합니다.

```{r git_commit, eval=FALSE, filename="RStudio Terminal pane"}
git commit -m "First commit & default setting & before rendering"
```

-   커밋 메시지는 해당 커밋의 내용을 요약하여 작성합니다. 여기서는 "First commit & default setting & before rendering"로 작성하였rh 원하시는 내용으로 작성하시면 됩니다.
:::

9단계: Render 해보기

::: {.callout-note title="9단계 예시" collapse="true" appearance="minimal"}
-   Rendering에는 크게 2가지 방법이 있는데 아래의 그림처럼 `Source Pane`의 `Render button`을 클릭하여 진행해 봅니다.

![](images/RenderButton.JPG)

-   처음으로 Render button 기능을 사용하면 Rendering Quarto Knitr Documents에는 migrittr, stringi, stringr 패키지들의 updated version이 필요하여 설치를 물어보는데 설치하면 됩니다.
-   Rendering이 되는 동안에 Console Pane Background jobs tab에서 아래의 messeage 들이 출력됩니다.

```{r quarto_render_outout, eval=FALSE, filename="Console Pane Background jobs tab"}
==> quarto preview index.qmd --to html --no-watch-inputs --no-browse

processing file: index.qmd
                                                                                           
output file: index.knit.md

pandoc 
  to: html
  output-file: index.html
  standalone: true
  title-prefix: R-4.4.1-Quarto_Website_Example
  section-divs: true
  html-math-method: mathjax
  wrap: none
  default-image-extension: png
  css:
    - styles.css
  toc: true
  
metadata
  document-css: false
  link-citations: true
  date-format: long
  lang: en
  editor: visual
  theme: cosmo
  title: R-4.4.1-Quarto_Website_Example
  
Output created: _site\index.html

Terminating existing preview server....DONE

Preparing to preview

Watching files for changes
Browse at http://localhost:7875/
GET: /
  

```

-   `quarto preview index.qmd --to html --no-watch-inputs --no-browse` 메세지는 해당 명령줄이 실행되었음을 나타내며,

    -   preview 옵션은 문서의 미리보기가 제공되었음을 의미하며,
    -   `index.qmd`: 파일이 대상임을 의미합니다.
    -   `--to html`: HTML 형식으로 출력함을 의미하며,
    -   `--no-watch-inputs`: 이 옵션을 사용하면 파일 변경을 실시간으로 감지하지 않고, 수동으로 업데이트함을 의미합니다.
    -   `` --no-browse` `` 미리보기 시 브라우저 창이 자동으로 열리지 않도록 합니다.

-   `processing file: index.qmd`는 index.qmd 파일을 처리하고 있음을 나타내며,

-   `output file: index.knit.md`는 index.qmd 파일이 변환된 결과를 저장할 파일명을 나타냅니다. 하지만 Rendering이 완료되면 이 파일을 삭제되므로 실제로는 중간단계로만 사용됩니다.

-   `pandoc to: html`은 pandoc이 html로 변환하도록 지정되어 있음을 나타내며,

-   `pandoc output-file: index.html`은 변환된 파일의 이름을 나타냅니다.

-   `pandoc standalone: true`는 변환된 파일이 독립적인 HTML 파일로 생성되도록 지정되어 있으며,

-   `title-prefix: R-4.4.1-Quarto_Website_Example`은 변환된 HTML 파일의 제목을 나타냅니다.

-   `section-divs: true`는 변환된 HTML 파일에 섹션을 나타내는 div 태그를 추가하도록 지정되어 있으며,

-   `html-math-method: mathjax`는 수학식을 MathJax로 변환하도록 지정되어 있습니다.

-   `wrap: none`은 변환된 HTML 파일에 줄 바꿈을 추가하지 않도록 지정되어 있으며,

-   `default-image-extension: png`는 변환된 HTML 파일에 이미지를 PNG 형식으로 추가하도록 지정되어 있습니다.

-   `- css: - styles.css`는 변환된 HTML 파일에 CSS 스타일을 적용하도록 지정되어 있으며,

-   `- toc: true`는 변환된 HTML 파일에 toc(table of contents) 목차를 추가하도록 지정되어 있습니다.
-   `metadata document-css: false`는 style.css 파일을 사용하도록 되어 있으므로 개별문서에 css가 포함되지 않도록 되었다는 의미입니다.
-   `metadata link-citations: true`는 citation을 링크로 연결하도록 지정되어 있음을 나타냅니다.
-   `metadata date-format: long`는 날짜포맷을 긴 형식으로 지정되어 있음을 나타냅니다. 에를 들어서 `27, october 2024`와 같은 포맷을 사용합니다.
-   `metadata lang: en`는 언어가 지정되지 않았으므로 기본값인 영어로 지정되어 있음을 나타냅니다.
-   `metadata editor: visual`는 Visual Markdown Editor 가 사용하도록 지정되어 있었다는 의미입니다.
-   `metadata theme: cosmo`는 cosmo 테마를 사용하도록 지정되어 있음을 나타냅니다.
-   `metadata title: R-4.4.1-Quarto_Website_Example`는 제목이 프로젝트폴더명으로 지정되어 있음을 나타냅니다.
-   `Output created: _site\index.html`는 변환된 HTML 파일이 _site 폴더에 index.html 파일로 생성되었음을 나타냅니다.
-   `Terminating existing preview server....DONE`는 이전에 실행되었던 미리보기 서버를 중단하여 새로 렌더링된 파일이 보이도록 준비했다는 의미입니다. 이렇게 하면 이전 미리보기가 중단되고, 최신 렌더링 파일이 Viewer Pane에 표시됩니다.
-   `Preparing to preview`는 렌더링된 파일을 미리보기하기 위해 준비되었음을 나타냅니다.
-   `Watching files for changes`는 혼란스러운 표현이며, 아마도 아직 파일 변경을 감지하고 있음을 나타냅니다.
-   `Browse at http://localhost:7875/`는 렌더링된 파일을 미리보기하기 위한 주소를 나타냅니다. no-browse 옵션을 사용했으므로 브라우저가 자동으로 열리지 않습니다. 따라서 주소를 복사하여 웹브라우저에 붙여넣기하여 미리보기를 할 수 있습니다. 그러나 Output Pane의 Viewer tab에 미리보기가 보이므로 브라우저를 열어 보아야 할 경우는 별도 없습니다.
-   `GET: /`는 미리보기를 위해 서버에 요청을 보냈음을 나타냅니다.
-   Render에 의해 생성된 파일은 `_site` 폴더에 저장되며, 이 폴더는 `.gitignore` 파일에 포함되어 있어 git 버전관리에서 제외됩니다.

:::

10단계: `_quarto.yml` 출력폴더 수정하기

::: {.callout-note title="10단계 예시" collapse="true" appearance="minimal"}
-   _quarto.yml 파일의 project section에 아래와 같이 `output-dir: docs`코드를 추가합니다.

```{r _quarto.yml_output, eval=FALSE, filename="_quarto.yml"}
project:
  type: website
  output-dir: docs

website:
  title: "R-4.4.1-Quarto_Website_Example"
  navbar:
    left:
      - href: index.qmd
        text: Home
      - about.qmd

format:
  html:
    theme: cosmo
    css: styles.css
    toc: true

editor: visual
```

-   Rendering을 하면 `_site` 폴더가 아닌 `docs` 폴더에 변환된 파일이 저장됩니다. 
-   `origin`은 원격저장소의 별칭입니다.
-   `main`은 로컬의 원격저장소 이름입니다. 그리고 위 명령으로 로컬의 main 브랜치에서 원격저장소 main 브랜치로 push합니다. \`

```{r git_push_output, eval=FALSE, filename="git log output"}
C:\Projects\R-4.4.1-Quarto_Website_Example>git push origin main
Enumerating objects: 8, done.
Counting objects: 100% (8/8), done.
Delta compression using up to 24 threads
Compressing objects: 100% (7/7), done.
Writing objects: 100% (8/8), 2.24 KiB | 763.00 KiB/s, done.
Total 8 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
To https://github.com/RPythonMember/Quarto_Website_Example.git
 * [new branch]      main -> main

C:\Projects\R-4.4.1-Quarto_Website_Example>
```

-   Enumerating objects: 객체수 계산에서 특이한 사항은 커밋된 파일은 6개 였는데 여기서는 객체수는 2개가 더 큽니다. 이는 디렉토리구조 파일과 커밋정보파일이 추가되기 때문입니다.
-   Counting objects: Git이 객체를 전송할 준비가 되었음을 나타냅니다.
-   Ddelta compression...: Git이 객체를 압축하는 과정입니다. 이 과정에서 24개의 CPU 스레드를 사용해 병렬로 압축을 진행합니다. Delta 압축은 이미 존재하는 데이터와 비교해 변경된 부분만 압축해 전송하는 방식입니다. Compressing objects: Git이 전송할 모든 객체를 압축하여 준비를 완료한 상태입니다.
-   Writing objects: 압축된 데이터를 원격 저장소에 전송하는 단계입니다. 8개의 객체가 2.24 KiB의 데이터로 전송되었으며, 전송 속도는 763.00 KiB/s로 전송이 완료되었다는 의미입니다.
-   Total 8 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0): 전송된 객체의 총 개수와 압축된 객체의 크기를 보여줍니다. 여기서는 새로운 브랜치가 생성되었으므로 delta 값이 0으로 나타납니다.
-   전송된 데이터가 원격 저장소인 https://github.com/RPythonMember/Quarto_Website_Example.git로 전송되었음을 나타냅니다.
-   \[new branch\] main -\> main: 새로운 브랜치가 생성되었음을 나타냅니다. main 브랜치가 원격 저장소 main branch로 전송되었음을 보여줍니다.
:::
