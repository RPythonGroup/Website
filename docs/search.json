[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "정렬\n       디폴트\n         \n          제목\n        \n         \n          날짜 - 날짜(오름차순)\n        \n         \n          날짜 - 날짜(내림차순)\n        \n         \n          저자\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nShiny Application Example\n\n\n\n\n\n\nR\n\n\nAPI\n\n\nShiny\n\n\nexample\n\n\n\nLearn how to set up and use Shiny\n\n\n\n\n\n2024. 10. 21.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nShiny Application Example\n\n\n\n\n\n\nR\n\n\nAPI\n\n\nShiny\n\n\nexample\n\n\n\nLearn how to set up and use Shiny\n\n\n\n\n\n2024. 10. 21.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nChi-square test in R\n\n\n\n\n\n\nR\n\n\nChi-square\n\n\n\nBrief introduction on basic statistics functions in R\n\n\n\n\n\n2024. 7. 17.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nOpen Goverment Data\n\n\n\n\n\n\nResource\n\n\nmedical data\n\n\n\nHow to use OGD and Examples\n\n\n\n\n\n2024. 10. 2.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nGit Setup in RStudio\n\n\n\n\n\n\nGit\n\n\nsetup\n\n\n\nLearn how to set up and use Git in RStudio\n\n\n\n\n\n2024. 10. 5.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nChi-Square Test\n\n\n\n\n\n\nstatistics\n\n\nChi-Square\n\n\nCategoical Data\n\n\n\nStatistics concept of Chi-Square test\n\n\n\n\n\n2024. 10. 4.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nVS Code Setup\n\n\n\n\n\n\nPython\n\n\nVS Code\n\n\nsetup\n\n\n\nGuidance on Installing and Configuring VS Code\n\n\n\n\n\n2024. 8. 31.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nGroup comparison in continuous variables\n\n\n\n\n\n\nstatistics\n\n\n\nStatistics concept in group comparison in continuous variables\n\n\n\n\n\n2024. 9. 27.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to IT\n\n\n\n\n\n\nintroduction\n\n\nIT\n\n\n\nIntroducing IT knowledges that are helpful for research groups\n\n\n\n\n\n2024. 9. 27.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Quarto\n\n\n\n\n\n\nintroduction\n\n\n\nQuarto is a modern tool for reproducible research and data-centric reporting, supporting dynamic documentation in multi-language environments and integrating programming workflows.\n\n\n\n\n\n2024. 9. 1.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Resources\n\n\n\n\n\n\nintroduction\n\n\n\nIntroducing medical (big) data resources that are helpful for research\n\n\n\n\n\n2024. 8. 31.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to statistics\n\n\n\n\n\n\nintroduction\n\n\n\nStatistics in R\n\n\n\n\n\n2024. 9. 27.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nSurvival analysis\n\n\n\n\n\n\nR\n\n\nstatistics\n\n\nsurvival analysis\n\n\n\njust copy from other well-organized webpages\n\n\n\n\n\n2024. 8. 31.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Utilities\n\n\n\n\n\n\nintroduction\n\n\n\nIntroducing open source programs that are helpful for research groups\n\n\n\n\n\n2024. 9. 27.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nManuscripting with Quarto Example\n\n\n\n\n\n\nR\n\n\nQuarto\n\n\n\nQuarto example how to wwite journal manuscript with unidentified real data\n\n\n\n\n\n2024. 8. 31.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nGit and Github setup\n\n\n\n\n\n\nGit\n\n\nsetup\n\n\n\nGuidance on Installing and Configuring Git & Github\n\n\n\n\n\n2024. 5. 6.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nPython setup\n\n\n\n\n\n\nPython\n\n\nsetup\n\n\n\nGuidance on Installing and Configuring Python\n\n\n\n\n\n2024. 9. 8.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduction to Python\n\n\n\n\n\n\nPython\n\n\nintroduction\n\n\n\nBrief history of Python development and application examples in medical research\n\n\n\n\n\n2024. 9. 7.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nR syntax\n\n\n\n\n\n\nR\n\n\nsyntax\n\n\n\nUnderstanding data type and manupulation\n\n\n\n\n\n2024. 8. 31.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nBasic statistics functions\n\n\n\n\n\n\nR\n\n\n\nBrief introduction on basic statistics functions in R\n\n\n\n\n\n2024. 7. 17.\n\n\nHaewon Lee\n\n\n\n\n\n\n\n\n\n\n\n\nBuilt-in Data sets in R\n\n\n\n\n\n\nR\n\n\n\nR includes built-in datasets. These datasets are useful for testing, teaching, and practicing.\n\n\n\n\n\n2024. 7. 17.\n\n\nHaewon Lee\n\n\n\n\n\n\n\n\n\n\n\n\nOutliers detection in continuous variables\n\n\n\n\n\n\nR\n\n\npreprocessing\n\n\noutlier\n\n\n\nHow to detect outliers in continuous variables using normal distribution and Box-Cox transformation.\n\n\n\n\n\n2024. 7. 8.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nR setup\n\n\n\n\n\n\nR\n\n\nsetup\n\n\n\nGuidance on Installing and Configuring R and Rtools\n\n\n\n\n\n2024. 5. 6.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nRStudio setup\n\n\n\n\n\n\nR\n\n\nRStudio\n\n\nsetup\n\n\n\nGuidance on Installing and Configuring RStudio\n\n\n\n\n\n2024. 5. 6.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nIntroduciton to R\n\n\n\n\n\n\nR\n\n\nintroduction\n\n\n\nBrief history of R developement and application examples in medical research\n\n\n\n\n\n2024. 5. 4.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n\n\n\n\n\n\nfor Medical Big Data Analysis\n\n\n\n\n\n\nintroduction\n\n\n\nThis site was created to assist in-house researchers who are interested in analyzing medical data using R and Python.\n\n\n\n\n\n2024. 4. 12.\n\n\nRPythonStudyGroup feat. ChatGPT\n\n\n\n\n\n\n일치 없음"
  },
  {
    "objectID": "posts/shiny/shiny_example.html",
    "href": "posts/shiny/shiny_example.html",
    "title": "Shiny Application Example",
    "section": "",
    "text": "Shiny는 R로 웹 어플리케이션을 만들 수 있게 해주는 패키지입니다. 이 문서에서는 API로 구한 데이터를 이용하여 Shiny Application 으로 시각화를 구현하는 예제를 만들어보겠습니다.\n1단계: RStudio에서 Shiny Application 내장된 예제 프로젝트 로딩하기\n\n\n\n\n\n\n1단계 예시\n\n\n\n\n\n\nRStudio File 메뉴에서 New Project &gt; New Directory &gt; Shiny Application을 차례로 선택하고 프로젝트 디렉토리를 C:/Projects 하부에 아래의 예시와 같이 만듭니다.\n\n\n\n\nCreat Shiny Application message box\n\nR-4.4.1-Shiny_Application_Example\n\n\n\ngit repository와 renv도 선택하여 진행하시는 것을 추천 드립니다.\n프로젝트 폴더에 app.R 파일이 생성되어 있으며 이를 열어보면 아래의 예제코드가 보입니다.\n\n\n\n\napp.R\n\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n이 코드는 기본적인 Shiny Application 예제 코드입니다. 그림 1 에서 보이는 Run App 버튼을 틀릭하여 코드를 실행시켜보면 Output/Viewer pane에서 자신의 로컬컴퓨터 상에서 웹 어플리케이션이 실행되는 것을 확인할 수 있습니다.\n\n\n\n\n\n\n\n그림 1: The Run App button can be found at the top-right of the source pane.\n\n\n\n\n실행된 application의 왼쪽 사이드에 있는 Number of bins을 욺직이면 우측 히스토그램에서 x축 간격이 달라짐을 보실 수 있습니다.\n\n\n\n\n2단계: Shiny Application의 핵심 구조 이해하기\n\n\n\n\n\n\n2단계 예시\n\n\n\n\n\n\n1단계에서 로딩한 내장된 예제코드를 아래와 같이 핵심구조만 남기고 삭제하여 매우 단순화 시키고 일부는 대체를 하여 shiny Application의 핵심구조에 대해 설명하겠습니다.\n\n\n\n\napp.R\n\nlibrary(shiny)\n\n# Define UI for application\nui &lt;- fluidPage(\n      textInput(\"user_input\", \"문자열을 입력하세요:\", \"\"),  # User input field\n      textOutput(\"output_text\")  # Dynamic text output\n)\n\n# Define server logic \nserver &lt;- function(input, output) {\n  \n  # Render the concatenated text\n  output$output_text &lt;- renderText({\n    paste(\"사용자가 아래의 문자열을 입력하셨습니다:\", input$user_input)  # Concatenate using paste()\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n단순화된 app.R은 3가지 주요 부분으로 구성되어 있습니다. 사용자 인터페이스 (UI) 정의:\n\n첫 번째 부분은 사용자 인터페이스(UI)로, 화면에서 어떤 입력을 받고, 어떤 출력을 할지 정의합니다. 여기서는 ui &lt;- fluidPage()로 구현되어 있습니다.\n\nfluidPage()는 반응형 레이아웃을 지원하는 화면 구성 함수로, 다양한 디바이스(데스크탑, 태블릿, 모바일)에서 화면 크기에 맞춰 UI가 자동으로 조정됩니다. 이 함수 내부에는 입력과 출력을 처리하는 함수들이 포함됩니다.\n입력 함수: textInput(“user_input”, “문자열을 입력하세요:”, ““)는 텍스트 입력을 받는 함수입니다.\n첫 번째 인자인 “user_input”은 입력된 값을 저장할 변수명입니다.\n두 번째 인자인 “문자열을 입력하세요:”는 입력 필드의 라벨로, 사용자가 텍스트를 입력할 때 보이는 안내 문구입니다.\n세 번째 인자인 ““는 기본값으로, 입력 필드가 처음에 비어 있음을 의미합니다.\n출력 함수: textOutput(“output_text”)는 출력 결과를 화면에 표시하는 함수입니다.\n첫 번째 인자인 “output_text”는 출력할 값을 저장된 변수명입니다.\n\n두 번째 부분은 서버(server) 함수로, 사용자 인터페이스에서 입력된 값을 어떻게 처리하고 출력할지를 정의합니다.\n\n서버 함수는 server &lt;- function(input, output) {}로 구성됩니다. 여기서:\ninput은 사용자가 입력한 값들이 저장된 참조형 반응형 리스트 객체입니다.\noutput은 변환된 출력값이 저장될 참조형 반응형 리스트 객체입니다.\n서버 함수 내부에서는 renderText() 함수를 사용해 텍스트를 처리하고, 그 내부에서 paste() 함수를 사용하여 입력된 텍스트를 출력할 텍스트와 결합합니다.\npaste() 함수는 input$user_input을 참조하여, UI에서 입력된 값을 가져옵니다. 이 값은 반응형 객체인 input을 통해 실시간으로 서버에 전달됩니다.\noutput$output_text에 직접 paste() 함수의 결과를 넣는 대신, renderText() 함수를 사용한 후 결과를 참조하게 됩니다. 이는 renderText()가 반응형으로 동작하여, 사용자가 입력할 때마다 출력값을 실시간으로 갱신해주기 때문입니다.\n\n마지막 부분은 Shiny 애플리케이션을 실행하는 shinyApp(ui = ui, server = server)입니다. 이 함수는 정의된 UI와 서버 로직을 결합하여 애플리케이션을 실행시킵니다.\n\n이제 그림 1 에서 보이는 Run App 버튼을 틀릭하여 코드를 실행시켜보면 Output/Viewer pane에서 자신의 로컬컴퓨터 상에서 웹 어플리케이션이 실행되는 것을 확인할 수 있습니다.\n\n입력을 하는 textInput 필드에 “Hello, Shiny!”를 입력하면 아래의 출력창에 “사용자가 아래의 문자열을 입력하셨습니다: Hello, Shiny!”가 출력됩니다. 그리고 새로운 문자를 다시 입력해 보시면 새로운 문자가 보임을 알 수 있습니다.\n이로써 핵심기능에 대한 설명을 마칩니다.\n\n\n\n\n3단계: API 다운로드 데이터 Shiny Application을 통한 시각화 예제\n\n\n\n\n\n\n3단계 예시\n\n\n\n\n\n\n3단계에서 API 데이터를 shiny Application으로 그래프를 그려주는 예제입니다. 아래의 코드를 app.R 파일에 복사하여 붙여넣기 하시면 됩니다.\n\n\n\n\napp.R\n\n################################################################################\n## API data download\n################################################################################\nlibrary(rjson)\nlibrary(httr)\n\n# API 호출 정보 설정\nbase_url &lt;- \"http://apis.data.go.kr/B551172/getDiagnosisRemoteCancerous\"\ncall_url &lt;- \"AllCancerRemoteOccurrenceTrend\"\nmethod &lt;- \"GET\"\n\nMy_API_Key &lt;- \"wqdX2OnQY29zYQ7BXsGafDqVNaIbIYUoqAqS1bOeK6/yyqdukiVcRcj25wue+U8tqSaSXThVPwfaWDNpUc6cwQ==\"\n# 요청 파라미터 설정\nparams &lt;- list(\n  serviceKey = My_API_Key,  # 실제 API 키로 변경\n  pageNo = 1,\n  numOfRows = 10,\n  resultType = \"json\"\n)\n\n# API 호출\nurl &lt;- paste0(base_url, \"/\", call_url)\nresponse &lt;- GET(url, query = params)\n\n# 응답 상태 확인\n# if (http_status(response) == 200)\nif (status_code(response) == 200)  {\n  # JSON 데이터 파싱\n  print(response)\n  str(response)\n  \n} else {\n  print(paste(\"API 호출 실패:\", status_code(response)))\n}\n\njson_text &lt;- content(response, as = \"text\")\nprint(json_text)\nprint(\"------------------\")\n\ndata &lt;- fromJSON(json_text)\nprint(data)\n\n# 예시: 리스트 내부에 있는 항목을 추출하여 데이터프레임으로 변환\ndata_list &lt;- data$items  # 적절한 필드로 접근\n\n# 데이터프레임으로 변환\ndf &lt;- as.data.frame(do.call(rbind, lapply(data_list, as.data.frame)))\n\n################################################################################\n## ShinyApp\n################################################################################\n\nlibrary(shiny)\nlibrary(ggplot2)\n\n# Define UI for the application\nui &lt;- fluidPage(\n\n  # Application title\n  titlePanel(\"API Data Vizualization with ShinyApp\"),\n  \n  # Sidebar layout\n  sidebarLayout(\n    sidebarPanel(\n      # Dropdown to select Y axis variable\n      selectInput(\"y_var\", \n                  \"Choose Y-axis Variable:\", \n                  choices = c(\"TOTAL\", \"VALUE\"),\n                  selected = \"TOTAL\")  # Default to TOTAL\n    ),\n    \n    # Main panel to display the plot\n    mainPanel(\n      plotOutput(\"yearPlot\")\n    )\n  )\n)\n\n# Define server logic to create the plot based on user selection\nserver &lt;- function(input, output) {\n  \n  # Render the plot\n  output$yearPlot &lt;- renderPlot({\n\n    # Plot using the selected Y variable\n    ggplot(data = df, aes(x = YEAR, y = .data[[input$y_var]])) +\n      geom_point() +\n      labs(x = \"Year\", y = input$y_var)\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n위 코드는 크게 API 데이터 다운로드 부분과 ShinyApp 부분으로 나누어져 있으며 각 부분은 주석으로 구역을 구분해 두었습니다.\nAPI를 통해 데이터를 다운로드 하는 부분은 설명을 생략하겠습니다.\nui에서 달라진 점은 fluidPage 함수 내부에 titlePanel 함수와 sidebarLayout 함수가 있으며, sidebarPanel과 mainPanel로 구성되어 있습니다.\ntitlePanel 함수는 애플리케이션의 제목을 정의합니다. 그림 2\n\n\n\n\n\n\n\n그림 2: Structure of a basic app with sidebar\n\n\n\n\nsidebarLayout 함수는 사이드바와 메인 패널을 정의합니다. 그림 2\n여기서는 textInput 함수 대신에 selectInput 함수를 사용하여 드롭다운 메뉴를 만들었습니다.\n출력함수로 textOutput 대신 plotOutput 함수를 사용하여 그래프를 출력합니다.\n서버로직 내에서는 renderText 대신 renderPlot 함수를 사용하여 그래프를 그립니다.\ninput 객체의 y_var 변수를 참조하여 y 축 값을 선택하고 y 축 제목을 지정하고 있습니다.\n그래프에서 사용하는 data는 앞단의 API downloaded data를 data.frame으로 만든 df를 그대로 사용하시면 됩니다.\n위 코드를 실행할 때에는 아래의 패키지들을 설치한 후 진행하셔야 합니다.\n실행하기 전에 아래의 패키지를 설치해야 합니다.\n\n\n\n\nR Console pane\n\nrenv::install(\"rjson\")\n\n\n\n\n\nR Console pane\n\nrenv::install(\"httr\")\n\n\n\n\n\nR Console pane\n\nrenv::install(\"ggplot2\")\n\n\n\n실행을 하면 아래와 같은 화면이 나타납니다.\n\n\n\n\n\n\n\n그림 3: API data visualization with ShinyApp\n\n\n\n\nR Shiny applicaion을 이용한 다양한 시각화 예제는 Posit사의 사이트 (https://shiny.posit.co/r/gallery/)를 참고하시길 바랍니다.",
    "crumbs": [
      "R",
      "Shiny Application Example"
    ]
  },
  {
    "objectID": "posts/shiny/shiny_example.html#introduction",
    "href": "posts/shiny/shiny_example.html#introduction",
    "title": "Shiny Application Example",
    "section": "",
    "text": "Shiny는 R로 웹 어플리케이션을 만들 수 있게 해주는 패키지입니다. 이 문서에서는 API로 구한 데이터를 이용하여 Shiny Application 으로 시각화를 구현하는 예제를 만들어보겠습니다.\n1단계: RStudio에서 Shiny Application 내장된 예제 프로젝트 로딩하기\n\n\n\n\n\n\n1단계 예시\n\n\n\n\n\n\nRStudio File 메뉴에서 New Project &gt; New Directory &gt; Shiny Application을 차례로 선택하고 프로젝트 디렉토리를 C:/Projects 하부에 아래의 예시와 같이 만듭니다.\n\n\n\n\nCreat Shiny Application message box\n\nR-4.4.1-Shiny_Application_Example\n\n\n\ngit repository와 renv도 선택하여 진행하시는 것을 추천 드립니다.\n프로젝트 폴더에 app.R 파일이 생성되어 있으며 이를 열어보면 아래의 예제코드가 보입니다.\n\n\n\n\napp.R\n\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n\nlibrary(shiny)\n\n# Define UI for application that draws a histogram\nui &lt;- fluidPage(\n\n    # Application title\n    titlePanel(\"Old Faithful Geyser Data\"),\n\n    # Sidebar with a slider input for number of bins \n    sidebarLayout(\n        sidebarPanel(\n            sliderInput(\"bins\",\n                        \"Number of bins:\",\n                        min = 1,\n                        max = 50,\n                        value = 30)\n        ),\n\n        # Show a plot of the generated distribution\n        mainPanel(\n           plotOutput(\"distPlot\")\n        )\n    )\n)\n\n# Define server logic required to draw a histogram\nserver &lt;- function(input, output) {\n\n    output$distPlot &lt;- renderPlot({\n        # generate bins based on input$bins from ui.R\n        x    &lt;- faithful[, 2]\n        bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n        # draw the histogram with the specified number of bins\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\n             xlab = 'Waiting time to next eruption (in mins)',\n             main = 'Histogram of waiting times')\n    })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n이 코드는 기본적인 Shiny Application 예제 코드입니다. 그림 1 에서 보이는 Run App 버튼을 틀릭하여 코드를 실행시켜보면 Output/Viewer pane에서 자신의 로컬컴퓨터 상에서 웹 어플리케이션이 실행되는 것을 확인할 수 있습니다.\n\n\n\n\n\n\n\n그림 1: The Run App button can be found at the top-right of the source pane.\n\n\n\n\n실행된 application의 왼쪽 사이드에 있는 Number of bins을 욺직이면 우측 히스토그램에서 x축 간격이 달라짐을 보실 수 있습니다.\n\n\n\n\n2단계: Shiny Application의 핵심 구조 이해하기\n\n\n\n\n\n\n2단계 예시\n\n\n\n\n\n\n1단계에서 로딩한 내장된 예제코드를 아래와 같이 핵심구조만 남기고 삭제하여 매우 단순화 시키고 일부는 대체를 하여 shiny Application의 핵심구조에 대해 설명하겠습니다.\n\n\n\n\napp.R\n\nlibrary(shiny)\n\n# Define UI for application\nui &lt;- fluidPage(\n      textInput(\"user_input\", \"문자열을 입력하세요:\", \"\"),  # User input field\n      textOutput(\"output_text\")  # Dynamic text output\n)\n\n# Define server logic \nserver &lt;- function(input, output) {\n  \n  # Render the concatenated text\n  output$output_text &lt;- renderText({\n    paste(\"사용자가 아래의 문자열을 입력하셨습니다:\", input$user_input)  # Concatenate using paste()\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n단순화된 app.R은 3가지 주요 부분으로 구성되어 있습니다. 사용자 인터페이스 (UI) 정의:\n\n첫 번째 부분은 사용자 인터페이스(UI)로, 화면에서 어떤 입력을 받고, 어떤 출력을 할지 정의합니다. 여기서는 ui &lt;- fluidPage()로 구현되어 있습니다.\n\nfluidPage()는 반응형 레이아웃을 지원하는 화면 구성 함수로, 다양한 디바이스(데스크탑, 태블릿, 모바일)에서 화면 크기에 맞춰 UI가 자동으로 조정됩니다. 이 함수 내부에는 입력과 출력을 처리하는 함수들이 포함됩니다.\n입력 함수: textInput(“user_input”, “문자열을 입력하세요:”, ““)는 텍스트 입력을 받는 함수입니다.\n첫 번째 인자인 “user_input”은 입력된 값을 저장할 변수명입니다.\n두 번째 인자인 “문자열을 입력하세요:”는 입력 필드의 라벨로, 사용자가 텍스트를 입력할 때 보이는 안내 문구입니다.\n세 번째 인자인 ““는 기본값으로, 입력 필드가 처음에 비어 있음을 의미합니다.\n출력 함수: textOutput(“output_text”)는 출력 결과를 화면에 표시하는 함수입니다.\n첫 번째 인자인 “output_text”는 출력할 값을 저장된 변수명입니다.\n\n두 번째 부분은 서버(server) 함수로, 사용자 인터페이스에서 입력된 값을 어떻게 처리하고 출력할지를 정의합니다.\n\n서버 함수는 server &lt;- function(input, output) {}로 구성됩니다. 여기서:\ninput은 사용자가 입력한 값들이 저장된 참조형 반응형 리스트 객체입니다.\noutput은 변환된 출력값이 저장될 참조형 반응형 리스트 객체입니다.\n서버 함수 내부에서는 renderText() 함수를 사용해 텍스트를 처리하고, 그 내부에서 paste() 함수를 사용하여 입력된 텍스트를 출력할 텍스트와 결합합니다.\npaste() 함수는 input$user_input을 참조하여, UI에서 입력된 값을 가져옵니다. 이 값은 반응형 객체인 input을 통해 실시간으로 서버에 전달됩니다.\noutput$output_text에 직접 paste() 함수의 결과를 넣는 대신, renderText() 함수를 사용한 후 결과를 참조하게 됩니다. 이는 renderText()가 반응형으로 동작하여, 사용자가 입력할 때마다 출력값을 실시간으로 갱신해주기 때문입니다.\n\n마지막 부분은 Shiny 애플리케이션을 실행하는 shinyApp(ui = ui, server = server)입니다. 이 함수는 정의된 UI와 서버 로직을 결합하여 애플리케이션을 실행시킵니다.\n\n이제 그림 1 에서 보이는 Run App 버튼을 틀릭하여 코드를 실행시켜보면 Output/Viewer pane에서 자신의 로컬컴퓨터 상에서 웹 어플리케이션이 실행되는 것을 확인할 수 있습니다.\n\n입력을 하는 textInput 필드에 “Hello, Shiny!”를 입력하면 아래의 출력창에 “사용자가 아래의 문자열을 입력하셨습니다: Hello, Shiny!”가 출력됩니다. 그리고 새로운 문자를 다시 입력해 보시면 새로운 문자가 보임을 알 수 있습니다.\n이로써 핵심기능에 대한 설명을 마칩니다.\n\n\n\n\n3단계: API 다운로드 데이터 Shiny Application을 통한 시각화 예제\n\n\n\n\n\n\n3단계 예시\n\n\n\n\n\n\n3단계에서 API 데이터를 shiny Application으로 그래프를 그려주는 예제입니다. 아래의 코드를 app.R 파일에 복사하여 붙여넣기 하시면 됩니다.\n\n\n\n\napp.R\n\n################################################################################\n## API data download\n################################################################################\nlibrary(rjson)\nlibrary(httr)\n\n# API 호출 정보 설정\nbase_url &lt;- \"http://apis.data.go.kr/B551172/getDiagnosisRemoteCancerous\"\ncall_url &lt;- \"AllCancerRemoteOccurrenceTrend\"\nmethod &lt;- \"GET\"\n\nMy_API_Key &lt;- \"wqdX2OnQY29zYQ7BXsGafDqVNaIbIYUoqAqS1bOeK6/yyqdukiVcRcj25wue+U8tqSaSXThVPwfaWDNpUc6cwQ==\"\n# 요청 파라미터 설정\nparams &lt;- list(\n  serviceKey = My_API_Key,  # 실제 API 키로 변경\n  pageNo = 1,\n  numOfRows = 10,\n  resultType = \"json\"\n)\n\n# API 호출\nurl &lt;- paste0(base_url, \"/\", call_url)\nresponse &lt;- GET(url, query = params)\n\n# 응답 상태 확인\n# if (http_status(response) == 200)\nif (status_code(response) == 200)  {\n  # JSON 데이터 파싱\n  print(response)\n  str(response)\n  \n} else {\n  print(paste(\"API 호출 실패:\", status_code(response)))\n}\n\njson_text &lt;- content(response, as = \"text\")\nprint(json_text)\nprint(\"------------------\")\n\ndata &lt;- fromJSON(json_text)\nprint(data)\n\n# 예시: 리스트 내부에 있는 항목을 추출하여 데이터프레임으로 변환\ndata_list &lt;- data$items  # 적절한 필드로 접근\n\n# 데이터프레임으로 변환\ndf &lt;- as.data.frame(do.call(rbind, lapply(data_list, as.data.frame)))\n\n################################################################################\n## ShinyApp\n################################################################################\n\nlibrary(shiny)\nlibrary(ggplot2)\n\n# Define UI for the application\nui &lt;- fluidPage(\n\n  # Application title\n  titlePanel(\"API Data Vizualization with ShinyApp\"),\n  \n  # Sidebar layout\n  sidebarLayout(\n    sidebarPanel(\n      # Dropdown to select Y axis variable\n      selectInput(\"y_var\", \n                  \"Choose Y-axis Variable:\", \n                  choices = c(\"TOTAL\", \"VALUE\"),\n                  selected = \"TOTAL\")  # Default to TOTAL\n    ),\n    \n    # Main panel to display the plot\n    mainPanel(\n      plotOutput(\"yearPlot\")\n    )\n  )\n)\n\n# Define server logic to create the plot based on user selection\nserver &lt;- function(input, output) {\n  \n  # Render the plot\n  output$yearPlot &lt;- renderPlot({\n\n    # Plot using the selected Y variable\n    ggplot(data = df, aes(x = YEAR, y = .data[[input$y_var]])) +\n      geom_point() +\n      labs(x = \"Year\", y = input$y_var)\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n위 코드는 크게 API 데이터 다운로드 부분과 ShinyApp 부분으로 나누어져 있으며 각 부분은 주석으로 구역을 구분해 두었습니다.\nAPI를 통해 데이터를 다운로드 하는 부분은 설명을 생략하겠습니다.\nui에서 달라진 점은 fluidPage 함수 내부에 titlePanel 함수와 sidebarLayout 함수가 있으며, sidebarPanel과 mainPanel로 구성되어 있습니다.\ntitlePanel 함수는 애플리케이션의 제목을 정의합니다. 그림 2\n\n\n\n\n\n\n\n그림 2: Structure of a basic app with sidebar\n\n\n\n\nsidebarLayout 함수는 사이드바와 메인 패널을 정의합니다. 그림 2\n여기서는 textInput 함수 대신에 selectInput 함수를 사용하여 드롭다운 메뉴를 만들었습니다.\n출력함수로 textOutput 대신 plotOutput 함수를 사용하여 그래프를 출력합니다.\n서버로직 내에서는 renderText 대신 renderPlot 함수를 사용하여 그래프를 그립니다.\ninput 객체의 y_var 변수를 참조하여 y 축 값을 선택하고 y 축 제목을 지정하고 있습니다.\n그래프에서 사용하는 data는 앞단의 API downloaded data를 data.frame으로 만든 df를 그대로 사용하시면 됩니다.\n위 코드를 실행할 때에는 아래의 패키지들을 설치한 후 진행하셔야 합니다.\n실행하기 전에 아래의 패키지를 설치해야 합니다.\n\n\n\n\nR Console pane\n\nrenv::install(\"rjson\")\n\n\n\n\n\nR Console pane\n\nrenv::install(\"httr\")\n\n\n\n\n\nR Console pane\n\nrenv::install(\"ggplot2\")\n\n\n\n실행을 하면 아래와 같은 화면이 나타납니다.\n\n\n\n\n\n\n\n그림 3: API data visualization with ShinyApp\n\n\n\n\nR Shiny applicaion을 이용한 다양한 시각화 예제는 Posit사의 사이트 (https://shiny.posit.co/r/gallery/)를 참고하시길 바랍니다.",
    "crumbs": [
      "R",
      "Shiny Application Example"
    ]
  }
]