---
title: "심평원 API로 통계그래프 그리기" 
description:  "A hands-on step by step tutorial to create a NM Statistics website using API."
author: "RPythonStudyGroup feat. ChatGPT"
date: "2024-11-18"
date-modified: "2024-11-18"
categories:
  - API
  - website
  - hands-on
---

-   사전준비:
    -   아래의 예시들은 저자가 건강보험심사평가원 해당 API 신청 및 승인을 해 둔 것이라 진행이 됩니다.
    -   연구회 여러분들의 자료가 더 바람직하며, 이 경우는 우리 연구회 웹사이트 중 공공데이터포털 메뉴의 방법 등을 따라 해당 API에 대한 활용신청 및 승인이 되어 있어야 합니다.

::: {.callout-note title="1단계: `Quarto Website` 프로젝트 만들기" collapse="true" appearance="minimal"}
-   RStudio/File 메뉴에서 `New Project...` 메뉴 선택
-   `New Directory`에 생성되도록 선택
-   Project type은 `Quarto Website`를 선택
-   상위폴더가 `C:/Projects`인지 확인 (=Global Options 사전 지정값)
-   Directory name은 `R-4.4.1-NM_Statistics`로 지정
-   [x] Create a git repository: 체크 유지하여 버전관리 적용
-   [x] Use renv with this project: 체크 유지하여 패키지 독립관리 적용
-   [x] Use visual markdown editor: 체크 유지하여 wizwig 에디터 사용
:::

```{r git_example, eval=FALSE, filename="recommeded project name"}
R-4.4.1-NM_Statistics
```

::: {.callout-note title="2단계: 버전관리 제외대상 추가하기" collapse="true" appearance="minimal"}
-   `.gitignore` 파일을 열어서 아래의 내용을 추가하여 git 버전관리에서 제외합니다.
:::

```{r gitignore_add, eval=FALSE, filename=".gitignore"}
.Rprofile
*.Rproj
renv/
```

::: {.callout-note title="3단계: API로 하나의 데이터만 호출해 보기" collapse="true" appearance="minimal"}
-   index.qmd 파일을 열어서 아래의 코드를 추가합니다.
-   Rendering 할 때, 자동으로 설치할 것으로 물어오지 않는다면 아래처럼 renv::install 함수를 사용하여 해당 패키지를 설치한 후 rendering 해야 합니다.

```{r install_rjson, eval=FALSE, filename="R Console Pane"}
renv::install("rjson")
```

```{r install_httr, eval=FALSE, filename="R Console Pane"}
renv::install("httr")
```

-   rendering 후에는 Environment 탭에 response가 생성된 것을 확인할 수 있습니다.
    -   data도 생성되었으며, 열어보면 리스트형태로 데이터가 들어있습니다.
:::

```{{r}}
#| label: API_call_basic
#| echo: false

library(rjson)
library(httr)

  # API URL 및 키 설정
  base_url <- "http://apis.data.go.kr/B551182/mdlrtActionInfoService"
  call_url <- "getMdlrtActionByClassesStats"
  My_API_Key <- "DRwFWZ/jfi6551teJKgRhkKgC+XhcjobN+ccY2MQdF9yZdx8xL5Kn4IljljMCWGsl2ObEco/rm21r14CN7iG0g=="

  # 파리미터 설정  
    params <- list(
    serviceKey = My_API_Key,
    pageNo = 1,
    numOfRows = 10,
    resultType = "json",
    year = "2023",
    stdType = "1",
    st5Cd = "HK010"
  )
  
  # url 생성 및 response 회신받기  
  url <- paste0(base_url, "/", call_url)
  response <- GET(url, query = params)

  # parsing하여 데이터 추출
  if (status_code(response) == 200) {
    json_text <- content(response, as = "text", encoding = "UTF-8")
    data <- fromJSON(json_text)
  } else {
    print(paste("API 호출 실패:", status_code(response)))
  }
```

::: {.callout-note title="4단계: 시작연도 설정하기" collapse="true" appearance="minimal"}
-   공공데이터포털에서 해당 API 미리보기를 하여 시작연도를 어떻게 설정할 지 검토하여 결정합니다.
-   시작연도를 설정하는 코드를 추가하는 예시코드는 아래와 같습니다.
    -   system date를 이용하여 my_year에 현재 연도를 대입합니다.
    -   while loop를 구현하고, xcondition으로 종료상황을 결정합니다.
        -   loop 내에서는 my_year는 하나씩 감소하고, totalCount가 5가 되면 종료하도록 구현되어 있습니다.
    -   편의를 위해 년도와 totalCount가 출력되도록 구현되어 있습니다.

:::

```{{r}}
#| label: API-call-while-loop
#| echo: false
 
library(rjson)
library(httr)

# 현재 연도를 설정
my_year <- as.numeric(format(Sys.Date(), "%Y"))


base_url <- "http://apis.data.go.kr/B551182/mdlrtActionInfoService"
call_url <- "getMdlrtActionByClassesStats"
My_API_Key <- "DRwFWZ/jfi6551teJKgRhkKgC+XhcjobN+ccY2MQdF9yZdx8xL5Kn4IljljMCWGsl2ObEco/rm21r14CN7iG0g=="

# 조건 변수 설정
xcondition <- TRUE  

while (xcondition) {
  params <- list(
    serviceKey = URLencode(My_API_Key),
    pageNo = 1,
    numOfRows = 10,
    resultType = "json",
    year = as.character(my_year), # 연도를 문자열로 변환
    stdType = "1",
    st5Cd = "HK010"
  )
  
  url <- paste0(base_url, "/", call_url)
  response <- GET(url, query = params)

  if (status_code(response) == 200) {
    json_text <- content(response, as = "text")
    data <- fromJSON(json_text)
    
    # totalCount가 존재하는지 확인 후 출력
    if (!is.null(data$response$body$totalCount)) {
      print(paste("연도:", my_year, "- totalCount:", data$response$body$totalCount))
      
      # totalCount가 5인 경우 루프 종료
      if (data$response$body$totalCount == 5) {
        xcondition <- FALSE
        print("totalCount가 5에 도달하여 루프를 종료합니다.")
      }
    } else {
      print("totalCount 값이 없습니다. 루프 종료.")
      xcondition <- FALSE
    }
  } else {
    print(paste("API 호출 실패:", status_code(response), "연도:", my_year))
    xcondition <- FALSE  # 오류 발생 시 루프 종료
  }
  
  # 연도를 1 감소
  my_year <- my_year - 1
}
```

::: {.callout-note title="5단계: 데이터프레임으로 저장해보기" collapse="true" appearance="minimal"}
-   데이터프레임으로 저장하기 위한 예시코드는 아래와 같습니다.
    -   데이터프레임을 초기화 합니다.
    -   while loop 내에서 totalCount가 6이라면 해당데이터 중 일부를 리스트로 변환한고 다시 데이터프레임으로 저장합니다.
    -   이를 루프가 반복될 때만다 data_frame에 더합니다 (=rbind).
:::

```{{r}}    
#| label: API_data.frame
#| echo: false
 
library(rjson)
library(httr)
library(plyr)

# 데이터를 저장할 데이터프레임 초기화
data_frame<-data.frame()

my_year <- as.numeric(format(Sys.Date(), "%Y"))


base_url <- "http://apis.data.go.kr/B551182/mdlrtActionInfoService"
call_url <- "getMdlrtActionByClassesStats"
My_API_Key <- "DRwFWZ/jfi6551teJKgRhkKgC+XhcjobN+ccY2MQdF9yZdx8xL5Kn4IljljMCWGsl2ObEco/rm21r14CN7iG0g=="

xcondition <- TRUE  

while (xcondition) {
  params <- list(
    serviceKey = URLencode(My_API_Key),
    pageNo = 1,
    numOfRows = 10,
    resultType = "json",
    year = as.character(my_year),
    stdType = "1",
    st5Cd = "HK010"
  )
  
  url <- paste0(base_url, "/", call_url)
  response <- GET(url, query = params)

  if (status_code(response) == 200) {
    json_text <- content(response, as = "text", encoding = "UTF-8")
    data <- fromJSON(json_text)
    
    if (!is.null(data$response$body$totalCount)) {
      print(paste("연도:", my_year, "- totalCount:", data$response$body$totalCount))
      # totalCount가 6이라면 해당데이터중 일부를 리스트로 변환하고 다시 데이터프레임으로 변환
      if(data$response$body$totalCount == 6){
        data_list <-data$response$body$items$item
        df <- rbind.fill(lapply(data_list, as.data.frame))
        data_frame<-rbind(data_frame,df)
        print("saved")
      }
      
      # totalCount가 5인 경우 루프 종료
      if (data$response$body$totalCount == 5) {
        xcondition <- FALSE
        print("totalCount가 5에 도달하여 루프를 종료합니다.")
      }
    } else {
      print("totalCount 값이 없습니다. 루프 종료.")
      xcondition <- FALSE
    }
  } else {
    print(paste("API 호출 실패:", status_code(response), "연도:", my_year))
    xcondition <- FALSE  # 오류 발생 시 루프 종료
  }
  
  # 연도를 1 감소
  my_year <- my_year - 1
}
```
