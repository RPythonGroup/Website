---
title: "Shiny Application Example"
description: "Learn how to set up and use Shiny"
author: "RPythonStudyGroup feat. ChatGPT"
date: "2024-10-15"
date-modified: "2024-10-15"
categories:
  - R
  - example
  - Shiny
---

## Introduction

Shiny는 R로 웹 어플리케이션을 만들 수 있게 해주는 패키지입니다. 이 문서에서는 API로 구한 데이터를 이용하여 Shiny Application 으로 시각화를 구현하는 예제를 만들어보겠습니다.

1단계: RStudio에서 `Shiny Application` 내장된 예제 프로젝트 로딩하기

::: {.callout-note title="1단계 예시" collapse="true" appearance="minimal"}
-   RStudio File 메뉴에서 New Project \> New Directory \> Shiny Application을 차례로 선택하고 프로젝트 디렉토리를 C:/Projects 하부에 아래의 예시와 같이 만듭니다.

```{r Directory_name, eval=FALSE, filename="Creat Shiny Application message box"}
R-4.4.1-Shiny_Application_Example
```

-   `git repository`와 `renv`도 선택하여 진행하시는 것을 추천 드립니다.
-   프로젝트 폴더에 app.R 파일이 생성되어 있으며 이를 열어보면 아래의 예제코드가 보입니다.

```{r ShinyDefault, eval=FALSE, filename="app.R"}
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    https://shiny.posit.co/
#

library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel("Old Faithful Geyser Data"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            sliderInput("bins",
                        "Number of bins:",
                        min = 1,
                        max = 50,
                        value = 30)
        ),

        # Show a plot of the generated distribution
        mainPanel(
           plotOutput("distPlot")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {

    output$distPlot <- renderPlot({
        # generate bins based on input$bins from ui.R
        x    <- faithful[, 2]
        bins <- seq(min(x), max(x), length.out = input$bins + 1)

        # draw the histogram with the specified number of bins
        hist(x, breaks = bins, col = 'darkgray', border = 'white',
             xlab = 'Waiting time to next eruption (in mins)',
             main = 'Histogram of waiting times')
    })
}

# Run the application 
shinyApp(ui = ui, server = server)
```

-   이 코드는 기본적인 Shiny Application 예제 코드입니다. @fig-RunApp 에서 보이는 `Run App` 버튼을 틀릭하여 코드를 실행시켜보면 Output/Viewer pane에서 자신의 로컬컴퓨터 상에서 웹 어플리케이션이 실행되는 것을 확인할 수 있습니다.

-   

    ![The Run App button can be found at the top-right of the source pane.](images/run-app.png){#fig-RunApp}

-   실행된 application의 왼쪽 사이드에 있는 `Number of bins`을 욺직이면 우측 히스토그램에서 x축 간격이 달라짐을 보실 수 있습니다.
:::

2단계: Shiny Application의 핵심 구조 이해하기

::: {.callout-note title="2단계 예시" collapse="true" appearance="minimal"}
-   1단계에서 로딩한 내장된 예제코드를 아래와 같이 핵심구조만 남기고 삭제하여 매우 단순화 시키고 일부는 대체를 하여 shiny Applicationd의 핵심구조에 대해 설명하겠습니다.

```{r UserInterfaceConcept, eval=FALSE, filename="app.R"}
library(shiny)

# Define UI for application
ui <- fluidPage(
      textInput("user_input", "문자열을 입력하세요:", ""),  # User input field
      textOutput("output_text")  # Dynamic text output
)

# Define server logic 
server <- function(input, output) {
  
  # Render the concatenated text
  output$output_text <- renderText({
    paste("사용자가 아래의 문자열을 입력하셨습니다:", input$user_input)  # Concatenate using paste()
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
```

-   단순화된 app.R은 3가지 부분으로 구성되어 있습니다.
-   첫번째는 화면에서 어떤 입력을 받고 어떤 출력을 할지 정의하는 사용자 인터페이스 (user interface, ui) 부분입니다. 위에서는 ui \<- fluidPage()로 구현되어 있는데, 이는 반응형 레이아웃을 지원하는 화면 구성 함수로 다양한 디바이스(예: 데스크탑, 태블릿, 모바일)에서 화면 크기에 따라 UI가 유연하게 조정되는 특성이 있으며, 함수 내부에는 입력을 받는 함수, 출력을 하는 함수를 포함합니다.
    -   입력받는 함수로써 textInput("user_input", "문자열을 입력하세요:", "")를 사용하였으며,
    -   함수의 첫번째 인자인 "user_input"는 입력받는 값의 변수명입니다.
    -   두번째 인자인 "문자열을 입력하세요:"는 입력받을 때 표시되는 label에 해당합니다.
    -   세번째 인자인 ""는 입력창에 나타날 기본값 설정으로 ""=null 값 설정 입니다.
-   두번째는 사용자 인터페이스에서 입력된 값을 화면에 어떻게 변환하여 출력할지를 정의하는 server \<- function(input, output) {} 함수 부분입니다.
    -   입력받는 변수를 출력되는 변수로 변화하기 위해 renderText ()함수를 사용하고 있습니다.
    로써 textInput("user_input", "문자열을 입력하세요:", "")를 사용하였으며,
    -   함수의 첫번째 인자인 "user_input"는 입력받는 값의 변수명입니다.
    -   두번째 인자인 "문자열을 입력하세요:"는 입력받을 때 표시되는 label에 해당합니다.
    -   세번째 인자인 ""는 입력창에 나타날 기본값 설정으로 ""=null 값 설정 입니다.
-   마지막으로 Shiny Application을 실행시키는 함수 shinyApp(ui = ui, server = server) 부분 입니다. - 첫 번째를 좀 더 구체적으로 살펴보면 fluidPage() 함수는 반응형 레이아웃을 지원하는 화면 구성 함수로, 다양한 디바이스(예: 데스크탑, 태블릿, 모바일)에서 화면 크기에 따라 UI가 유연하게 조정됩니다.

-   shinyApp 함수는 겉으로는 매우 간결하게 보이지만, 내부적으로 다양한 작업을 수행하도록 설계되어 있습니다. 이 함수는 사전에 정의된 사용자 인터페이스(UI)와 서버 로직을 연결하여 Shiny 애플리케이션을 구동합니다. 이벤트 드리븐(event-driven) 아키텍처를 기반으로, 사용자 입력에 대한 이벤트를 감지하고, 이를 서버 측에 전달하여 반응형 연산을 수행한 뒤 결과를 실시간으로 클라이언트에 출력합니다.

-   fluidPage()는 반응형 레이아웃을 지원하는 화면 구성 함수로, 다양한 디바이스(예: 데스크탑, 태블릿, 모바일)에서 화면 크기에 따라 UI가 유연하게 조정됩니다. 이 함수는 화면의 요소들이 디바이스의 해상도나 창 크기에 맞게 동적으로 배치되도록 합니다 @fig-sidebar .

-   

    ![Structure of a basic app with sidebar](images/sidebar.png){#fig-sidebar}

-   titlePanel() 함수는 fluidPage() 내부에 사용되어 애플리케이션의 제목을 화면 상단에 표시합니다. 이 함수는 앱의 제목을 눈에 잘 띄게 표시하여 사용자가 현재 보고 있는 애플리케이션의 제목을 쉽게 인식할 수 있게 합니다.

-   sidebarLayout() 함수는 fluidPage() 내부에서 사용되어 화면을 사이드바와 메인 패널로 나눕니다. 이 함수는 페이지를 두 개의 영역으로 나누며, 보통 sidebarPanel()을 사용하여 입력 요소를 배치하고, mainPanel()을 사용하여 결과나 시각화된 출력을 보여줍니다 @fig-sidebar .

-   ui 내에서 입력을 받는 함수는 종류가 많지만 여기서는 사용자의 입력한 문자열을 입력받는 함수를 예시로 사용하겠습니다.

-   ui 내에서 출력을 하는 함수는 많지만 여기에서는 사용자가 입력한 문자열을 "사용자가 아래의 문자열을 입력하셨습니다."와 실제 입력된 문자열을 합친 결과를 출력하는 함수를 사용하였습니다.

-   server에서는 이를 구현하는 함수를 작성하였습니다.
:::

```{r UserInterfaceConcept, eval=FALSE, filename="app.R"}
library(shiny)

# Define UI for application
ui <- fluidPage(
  
  # Application title
  titlePanel("여기에는 Application title이 위치합니다"),
  
  # Layout with sidebar and main panel
  sidebarLayout(
    
    # Sidebar with a text input
    sidebarPanel(
      textInput("user_input", "문자열을 입력하세요:", "")  # User input field
    ),
    
    # Main panel to display the input
    mainPanel(
      textOutput("output_text")  # Dynamic text output
    )
  )
)

# Define server logic 
server <- function(input, output) {
  
  # Render the concatenated text
  output$output_text <- renderText({
    paste("사용자가 아래의 문자열을 입력하셨습니다:", input$user_input)  # Concatenate using paste()
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
```
